import React, { useState, useEffect } from "react";
import { Link, useNavigate } from "react-router-dom";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Separator } from "@/components/ui/separator";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Copy, Eye, EyeOff, Server, Check, Video, BarChart, Share2, Shield, Zap, Settings, ChevronLeft, 
  Users, Tv, MessageCircle, Star, GiftIcon, AlertTriangle, Rocket, Activity, Smartphone, ArrowUp, 
  TrendingUp, Radio, Globe, Menu, Play, Pause, Mic, MicOff, Camera, PanelLeft } from "lucide-react";
import { toast } from "sonner";
import { motion, AnimatePresence } from "framer-motion";

import CosmicChatViewer from "@/components/CosmicChatViewer";

// CSS for cosmic animations and effects
const cosmicStyles = `
  @keyframes floatAnimation {
    0% { transform: translateY(0px); }
    50% { transform: translateY(-10px); }
    100% { transform: translateY(0px); }
  }
  
  @keyframes pulseGlow {
    0% { box-shadow: 0 0 5px rgba(138, 43, 226, 0.4); }
    50% { box-shadow: 0 0 15px rgba(138, 43, 226, 0.7); }
    100% { box-shadow: 0 0 5px rgba(138, 43, 226, 0.4); }
  }
  
  @keyframes starTwinkle {
    0% { opacity: 0.2; }
    50% { opacity: 0.8; }
    100% { opacity: 0.2; }
  }
  
  @keyframes cosmicPulse {
    0% { transform: scale(1); opacity: 0.7; }
    50% { transform: scale(1.05); opacity: 0.9; }
    100% { transform: scale(1); opacity: 0.7; }
  }
  
  @keyframes nebulaDrift {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }
  
  @keyframes cometTrail {
    0% { transform: translateX(-100%) translateY(-100%) rotate(45deg); opacity: 0; }
    30% { opacity: 0.7; }
    70% { opacity: 0.5; }
    100% { transform: translateX(200%) translateY(200%) rotate(45deg); opacity: 0; }
  }
  
  .cosmic-float {
    animation: floatAnimation 6s infinite ease-in-out;
  }
  
  .cosmic-pulse {
    animation: pulseGlow 3s infinite ease-in-out;
  }
  
  .cosmic-star {
    position: absolute;
    background-color: white;
    border-radius: 50%;
    width: 2px;
    height: 2px;
    animation: starTwinkle var(--twinkle-duration, 4s) infinite ease-in-out;
    animation-delay: var(--twinkle-delay, 0s);
    opacity: var(--star-opacity, 0.7);
  }
  
  .cosmic-button {
    position: relative;
    overflow: hidden;
    transition: all 0.3s ease;
    background: linear-gradient(135deg, rgba(128, 0, 128, 0.8), rgba(75, 0, 130, 0.8));
  }
  
  .cosmic-button::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: all 0.6s ease;
  }
  
  .cosmic-button:hover::before {
    left: 100%;
  }
  
  .cosmic-comet {
    position: absolute;
    width: 50px;
    height: 1px;
    background: linear-gradient(90deg, transparent, #fff, #fff, transparent);
    opacity: 0;
    animation: cometTrail 6s infinite ease-out;
    animation-delay: var(--comet-delay, 0s);
    box-shadow: 0 0 10px 1px rgba(255, 255, 255, 0.5);
    pointer-events: none;
  }
  
  .nebula-bg {
    background: linear-gradient(135deg, rgba(25, 25, 50, 0), rgba(60, 10, 80, 0.2), rgba(15, 15, 35, 0));
    background-size: 400% 400%;
    animation: nebulaDrift 15s infinite ease-in-out;
    position: absolute;
    inset: 0;
    z-index: -1;
  }
`;

// Main Streaming Page Component
const StreamingPage: React.FC = () => {
  const navigate = useNavigate();
  // State management for streaming functionality
  const [showKey, setShowKey] = useState(false);
  const [activeTab, setActiveTab] = useState("live");
  const [showChatViewer, setShowChatViewer] = useState(false);
  const [showStreamManager, setShowStreamManager] = useState(false);
  const [streamLayout, setStreamLayout] = useState("default"); // default, chat-focus, analytics-focus
  
  // Stream status and metrics
  const [isLive, setIsLive] = useState(false);
  const [streamDuration, setStreamDuration] = useState(0);
  const [viewerCount, setViewerCount] = useState(0);
  const [chatCount, setChatCount] = useState(0);
  
  // Mobile streaming setup
  const [showStreamSetup, setShowStreamSetup] = useState(false);
  const [streamTitle, setStreamTitle] = useState("");
  const [streamCategory, setStreamCategory] = useState("gaming");
  const [streamGame, setStreamGame] = useState("");
  const [isMobileStream, setIsMobileStream] = useState(false);
  
  // Mobile streaming controls
  const [isMicEnabled, setIsMicEnabled] = useState(true);
  const [isCameraEnabled, setIsCameraEnabled] = useState(true);
  
  // Function to toggle chat viewer modal with enhanced reliability
  const toggleChatViewer = () => {
    console.log('Toggling chat viewer, current state:', showChatViewer);
    setShowChatViewer(prevState => !prevState);
    // Prevent navigation
    return false;
  };
  
  // Toggle stream manager
  const toggleStreamManager = () => {
    setShowStreamManager(prev => !prev);
  };
  
  // Toggle mobile streaming setup dialog
  const toggleStreamSetup = () => {
    setShowStreamSetup(prev => !prev);
  };
  
  // Function to start stream from mobile
  const startMobileStream = () => {
    if (!streamTitle) {
      toast.error("Please enter a stream title");
      return;
    }
    
    setIsMobileStream(true);
    setIsLive(true);
    setShowStreamSetup(false);
    toast.success("Mobile stream started!");
  };
  
  // Change stream layout mode
  const changeStreamLayout = (layout: string) => {
    setStreamLayout(layout);
    toast.success(`Layout changed to ${layout} mode`);
  };
  
  // Stream info loading state
  const [isLoading, setIsLoading] = useState(true);
  
  // Stream info
  const [streamInfo, setStreamInfo] = useState({
    streamKey: "live_1234567890abcdef",
    serverUrl: "rtmp://live.clipt.cc/stream",
    playbackUrl: "https://stream.clipt.cc/watch/1234567890abcdef",
    usingFallback: false
  });
  
  // Simulate loading stream info
  useEffect(() => {
    const timer = setTimeout(() => {
      setIsLoading(false);
    }, 1500);
    
    return () => clearTimeout(timer);
  }, []);
  
  // Function to copy to clipboard
  const copyToClipboard = async (text: string, type: string) => {
    try {
      await navigator.clipboard.writeText(text);
      toast.success(`${type} copied to clipboard`);
    } catch (err) {
      console.error("Failed to copy:", err);
      toast.error("Failed to copy to clipboard");
    }
  };
  
  // Handle tab changes
  useEffect(() => {
    console.log("Active tab changed to:", activeTab);
  }, [activeTab]);

  // Inject cosmic styles to the document
  useEffect(() => {
    const styleElement = document.createElement('style');
    styleElement.innerHTML = cosmicStyles;
    document.head.appendChild(styleElement);
    
    return () => {
      document.head.removeChild(styleElement);
    };
  }, []);
  
  // Simulate viewer data for live streaming
  useEffect(() => {
    if (isLive) {
      const interval = setInterval(() => {
        setStreamDuration(prev => prev + 1);
        setViewerCount(prev => Math.floor(prev + Math.random() * 5 - 1));
        setChatCount(prev => prev + Math.floor(Math.random() * 3));
      }, 1000);
      
      return () => clearInterval(interval);
    }
  }, [isLive]);
  
  // Handle Go Live toggle
  const toggleLiveStatus = () => {
    if (!isLive) {
      // Going live
      setIsLive(true);
      toast.success("You're now live! Broadcasting started.");
    } else {
      // Ending stream
      setIsLive(false);
      toast.info("Broadcast ended. Stream statistics saved.");
      setStreamDuration(0);
      setViewerCount(0);
      setChatCount(0);
    }
  };

  // Effect to simulate stream metrics when live
  useEffect(() => {
    let interval: NodeJS.Timeout;
    
    if (isLive) {
      // Initialize viewer count
      setViewerCount(Math.floor(Math.random() * 50) + 5);
      
      interval = setInterval(() => {
        setStreamDuration(prev => prev + 1);
        
        // Random viewer count fluctuation
        if (Math.random() > 0.7) {
          setViewerCount(prev => Math.max(1, prev + (Math.random() > 0.5 ? 1 : -1)));
        }
        
        // Random chat message count increase
        if (Math.random() > 0.6) {
          setChatCount(prev => prev + 1);
        }
      }, 1000);
    }
    
    return () => {
      if (interval) clearInterval(interval);
    };
  }, [isLive]);

  return (
    <div className="min-h-screen bg-black text-white relative">
      {/* Inject cosmic styles */}
      <style dangerouslySetInnerHTML={{ __html: cosmicStyles }} />
      
      {/* Cosmic background effects */}
      <div className="absolute inset-0 overflow-hidden z-0">
        {/* Starfield background */}
        <div className="absolute inset-0">
          {Array.from({ length: 100 }).map((_, i) => (
            <div 
              key={i}
              className="cosmic-star"
              style={{
                left: `${Math.random() * 100}%`,
                top: `${Math.random() * 100}%`,
                width: `${Math.random() * 3 + 1}px`,
                height: `${Math.random() * 3 + 1}px`,
                '--twinkle-duration': `${Math.random() * 5 + 3}s`,
                '--twinkle-delay': `${Math.random() * 5}s`,
                '--star-opacity': `${Math.random() * 0.5 + 0.3}`,
              } as React.CSSProperties}
            />
          ))}
        </div>
        
        {/* Nebula overlays */}
        <div className="nebula-bg"></div>
        
        {/* Comet animations */}
        {Array.from({ length: 3 }).map((_, i) => (
          <div 
            key={i}
            className="cosmic-comet"
            style={{
              top: `${Math.random() * 70 + 10}%`,
              left: `${Math.random() * 20}%`,
              '--comet-delay': `${i * 8 + Math.random() * 5}s`,
            } as React.CSSProperties}
          />
        ))}
      </div>
      
      <div className="container mx-auto px-4 py-6 relative z-10">
        {/* Header with gradient border */}
        <div className="mb-6 pb-3 border-b border-indigo-900/30" 
          style={{ 
            background: 'linear-gradient(90deg, rgba(30, 30, 60, 0), rgba(60, 30, 120, 0.1), rgba(30, 30, 60, 0))',
            boxShadow: '0 4px 15px -3px rgba(30, 30, 60, 0.2)'
          }}>
          <div className="flex flex-wrap items-center justify-between gap-4">
            <div>
              <h1 className="text-2xl md:text-3xl font-bold mb-1 text-transparent bg-clip-text bg-gradient-to-r from-indigo-400 via-purple-400 to-indigo-400">
                <Video className="inline-block mr-2 h-8 w-8 text-indigo-400" />
                Streaming Studio
              </h1>
              <p className="text-indigo-300/80 text-sm md:text-base">
                Configure and manage your cosmic stream experience
              </p>
            </div>
            
            {/* Action buttons */}
            <div className="flex gap-3 items-center">
              {/* Stream Manager Button */}
              <Button
                variant="outline"
                size="sm"
                className="text-white bg-indigo-900 hover:bg-indigo-800"
                onClick={toggleStreamManager}
              >
                <PanelLeft className="h-4 w-4 mr-2" />
                Stream Manager
              </Button>
              
              {/* Chat Viewer Button */}
              <Button
                variant="outline"
                size="sm"
                className="text-white bg-purple-900 hover:bg-purple-800 hidden md:flex"
                onClick={toggleChatViewer}
              >
                <MessageCircle className="h-4 w-4 mr-2" />
                View Chat
              </Button>
              
              {/* Mobile Go Live Button */}
              <div className="relative">
                <motion.div
                  initial={{ scale: 1 }}
                  animate={{ 
                    scale: isLive ? [1, 1.05, 1] : 1,
                    transition: { 
                      repeat: isLive ? Infinity : 0, 
                      duration: 2
                    }
                  }}
                  className="relative z-10"
                >
                  {/* Desktop Go Live Button */}
                  <Button 
                    onClick={isLive ? toggleLiveStatus : toggleStreamSetup}
                    className={`hidden md:flex relative ${isLive 
                      ? 'bg-red-600 hover:bg-red-700' 
                      : 'bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700'}`}
                  >
                    <div className="absolute inset-0 overflow-hidden rounded-md opacity-20">
                      {Array.from({ length: 10 }).map((_, i) => (
                        <div 
                          key={i}
                          className="cosmic-star"
                          style={{
                            left: `${Math.random() * 100}%`,
                            top: `${Math.random() * 100}%`,
                            width: `${Math.random() * 2 + 1}px`,
                            height: `${Math.random() * 2 + 1}px`,
                            '--twinkle-duration': `${Math.random() * 3 + 1}s`,
                            '--twinkle-delay': `${Math.random() * 3}s`,
                          } as React.CSSProperties}
                        />
                      ))}
                    </div>
                    
                    <Radio className={`h-4 w-4 mr-2 ${isLive ? 'text-red-100 animate-pulse' : ''}`} />
                    {isLive ? 'End Stream' : 'Go Live'}
                  </Button>
                  
                  {/* Mobile Go Live Button */}
                  <Button 
                    onClick={isLive ? toggleLiveStatus : toggleStreamSetup}
                    className={`md:hidden relative flex items-center ${isLive 
                      ? 'bg-red-600 hover:bg-red-700' 
                      : 'bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-600'}`}
                  >
                    <div className="absolute inset-0 overflow-hidden rounded-md opacity-20">
                      {Array.from({ length: 10 }).map((_, i) => (
                        <div 
                          key={i}
                          className="cosmic-star"
                          style={{
                            left: `${Math.random() * 100}%`,
                            top: `${Math.random() * 100}%`,
                          } as React.CSSProperties}
                        />
                      ))}
                    </div>
                    
                    <Smartphone className={`h-4 w-4 mr-2 ${isLive ? 'text-red-100 animate-pulse' : ''}`} />
                    {isLive ? 'Live' : 'Mobile Stream'}
                  </Button>
                </motion.div>
                
                {/* Live status indicator */}
                {isLive && (
                  <span className="absolute -top-2 -right-2 flex h-3 w-3 z-20">
                    <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-red-400 opacity-75"></span>
                    <span className="relative inline-flex rounded-full h-3 w-3 bg-red-500"></span>
                  </span>
                )}
              </div>
            </div>
          </div>
        </div>     {/* Main Content */}
      <div className="container mx-auto px-4 py-6">
        {/* Cosmic Chat Viewer Display */}
        <div className="mb-8">
          <Card className="overflow-hidden border border-purple-700/40 bg-black/50">
            <CardHeader className="bg-gradient-to-r from-purple-900/50 to-indigo-900/50 pb-2">
              <CardTitle className="text-xl flex items-center gap-2">
                <MessageCircle className="h-5 w-5 text-purple-400" /> 
                <span className="bg-clip-text text-transparent bg-gradient-to-r from-purple-300 to-indigo-200">Cosmic Chat Viewer</span>
              </CardTitle>
              <CardDescription className="text-purple-300/80">
                Monitor your chat in our enhanced space-themed viewer
              </CardDescription>
            </CardHeader>
            <CardContent className="p-0">
              <CosmicChatViewer />
            </CardContent>
          </Card>
        </div>
        
        {/* Navigation tabs */}
        <div className="mb-6 mt-4">
          <Tabs
            defaultValue={activeTab}
            onValueChange={(value) => {
              setActiveTab(value);
              // No navigation, just tab switch
            }}
            className="w-full">
            <TabsList className="grid grid-cols-3 mb-4">
              <TabsTrigger value="live">Live Stream</TabsTrigger>
              <TabsTrigger value="analytics">Analytics</TabsTrigger>
              <TabsTrigger value="settings">Settings</TabsTrigger>
            </TabsList>
            
            <TabsContent value="live">
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* Stream Information */}
                <Card className="mb-6">
                  <CardHeader className="flex flex-col space-y-1 pb-2">
                    <CardTitle className="text-xl">Stream Information</CardTitle>
                    <CardDescription>
                      Your stream settings and connection information
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    {isLoading ? (
                      <div className="animate-pulse space-y-4">
                        <div className="bg-slate-800 h-12 rounded-md"></div>
                        <div className="bg-slate-800 h-12 rounded-md"></div>
                        <div className="bg-slate-800 h-12 rounded-md"></div>
                      </div>
                    ) : (
                      <>
                        <div className="space-y-4">
                          <div>
                            <label className="text-sm text-slate-400 mb-1 block">Stream Key</label>
                            <div className="flex">
                              <Input
                                readOnly
                                className="font-mono bg-black/60 border-slate-700 text-slate-300 flex-1"
                                type={showKey ? "text" : "password"}
                                value={streamInfo.streamKey}
                              />
                              <Button
                                variant="ghost"
                                size="icon"
                                className="ml-2"
                                onClick={() => setShowKey(!showKey)}
                              >
                                {showKey ? <EyeOff size={18} /> : <Eye size={18} />}
                              </Button>
                              <Button
                                variant="ghost"
                                size="icon"
                                className="ml-1"
                                onClick={() => copyToClipboard(streamInfo.streamKey, "Stream key")}
                              >
                                <Copy size={18} />
                              </Button>
                            </div>
                          </div>
                          
                          <div>
                            <label className="text-sm text-slate-400 mb-1 block">Server URL</label>
                            <div className="flex">
                              <Input
                                readOnly
                                className="font-mono bg-black/60 border-slate-700 text-slate-300 flex-1"
                                value={streamInfo.serverUrl}
                              />
                              <Button
                                variant="ghost"
                                size="icon"
                                className="ml-1"
                                onClick={() => copyToClipboard(streamInfo.serverUrl, "Server URL")}
                              >
                                <Copy size={18} />
                              </Button>
                            </div>
                          </div>
                          
                          <div>
                            <label className="text-sm text-slate-400 mb-1 block">Playback URL</label>
                            <div className="flex">
                              <Input
                                readOnly
                                className="font-mono bg-black/60 border-slate-700 text-slate-300 flex-1"
                                value={streamInfo.playbackUrl}
                              />
                              <Button
                                variant="ghost"
                                size="icon"
                                className="ml-1"
                                onClick={() => copyToClipboard(streamInfo.playbackUrl, "Playback URL")}
                              >
                                <Copy size={18} />
                              </Button>
                            </div>
                          </div>
                        </div>
                      </>
                    )}
                  </CardContent>
                  <CardFooter className="flex justify-between border-t border-slate-800 pt-4">
                    <Button
                      variant="outline"
                      size="sm"
                      className="text-white bg-indigo-900 hover:bg-indigo-800"
                      onClick={() => navigate('/stream-analytics')}
                    >
                      <BarChart className="h-4 w-4 mr-2" />
                      Stream Analytics
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      className="text-white bg-purple-900 hover:bg-purple-800 relative overflow-hidden group"
                      onClick={toggleChatViewer}
                    >
                      {/* Cosmic button effect */}
                      <span className="absolute inset-0 bg-gradient-to-r from-purple-600/20 to-indigo-600/20 opacity-0 group-hover:opacity-100 transition-opacity"></span>
                      <MessageCircle className="h-4 w-4 mr-2" />
                      {showChatViewer ? 'Hide Chat' : 'View Chat'}
                    </Button>
                  </CardFooter>
                </Card>
              </div>
            </TabsContent>
            
            <TabsContent value="analytics">
              <Card className="bg-gradient-to-br from-slate-900 via-slate-900 to-indigo-950/70 border-indigo-900/30 overflow-hidden">
                <div className="absolute inset-0 opacity-30">
                  {Array.from({ length: 30 }).map((_, i) => (
                    <div 
                      key={i}
                      className="cosmic-star"
                      style={{
                        left: `${Math.random() * 100}%`,
                        top: `${Math.random() * 100}%`,
                        width: `${Math.random() * 2 + 1}px`,
                        height: `${Math.random() * 2 + 1}px`,
                        '--twinkle-duration': `${Math.random() * 5 + 2}s`,
                        '--twinkle-delay': `${Math.random() * 3}s`,
                      } as React.CSSProperties}
                    />
                  ))}
                </div>
                
                <CardHeader className="relative z-10 border-b border-indigo-700/30">
                  <CardTitle className="text-transparent bg-clip-text bg-gradient-to-r from-blue-300 to-indigo-400 flex items-center gap-2">
                    <Activity className="h-5 w-5 text-blue-400" />
                    Stream Analytics
                  </CardTitle>
                  <CardDescription className="text-indigo-200/70">
                    Monitor your streaming performance in real-time
                  </CardDescription>
                </CardHeader>
                
                <CardContent className="relative z-10 pt-6">
                  <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8">
                    <Card className="bg-slate-900/80 border-indigo-800/20 p-4 cosmic-pulse">
                      <div className="flex justify-between items-center mb-2">
                        <h4 className="text-sm font-medium text-slate-300">Total Views</h4>
                        <Users className="h-4 w-4 text-indigo-400" />
                      </div>
                      <p className="text-2xl font-semibold text-white mb-1">{isLive ? viewerCount : 0}</p>
                      <div className="flex items-center text-xs">
                        <ArrowUp className="h-3 w-3 mr-1 text-emerald-500" />
                        <span className="text-emerald-500">12%</span>
                        <span className="text-slate-400 ml-1">from last stream</span>
                      </div>
                    </Card>
                    
                    <Card className="bg-slate-900/80 border-indigo-800/20 p-4 cosmic-pulse">
                      <div className="flex justify-between items-center mb-2">
                        <h4 className="text-sm font-medium text-slate-300">Chat Messages</h4>
                        <MessageCircle className="h-4 w-4 text-indigo-400" />
                      </div>
                      <p className="text-2xl font-semibold text-white mb-1">{isLive ? chatCount : 0}</p>
                      <div className="flex items-center text-xs">
                        <ArrowUp className="h-3 w-3 mr-1 text-emerald-500" />
                        <span className="text-emerald-500">8%</span>
                        <span className="text-slate-400 ml-1">engagement rate</span>
                      </div>
                    </Card>
                    
                    <Card className="bg-slate-900/80 border-indigo-800/20 p-4 cosmic-pulse">
                      <div className="flex justify-between items-center mb-2">
                        <h4 className="text-sm font-medium text-slate-300">Stream Health</h4>
                        <Activity className="h-4 w-4 text-indigo-400" />
                      </div>
                      <p className="text-2xl font-semibold text-white mb-1">Excellent</p>
                      <div className="flex items-center text-xs">
                        <span className="text-emerald-500 mr-1">98%</span>
                        <span className="text-slate-400">uptime performance</span>
                      </div>
                    </Card>
                  </div>
                  
                  <div className="space-y-6">
                    <div>
                      <h4 className="text-sm font-medium text-slate-300 mb-2 flex items-center">
                        <TrendingUp className="h-4 w-4 mr-2 text-indigo-400" />
                        Viewer Retention
                      </h4>
                      <div className="h-24 bg-slate-800/50 rounded-md border border-slate-700/30 p-2 relative overflow-hidden">
                        <div className="absolute inset-0 flex items-end justify-around">
                          {Array.from({ length: 24 }).map((_, i) => {
                            const height = 10 + Math.random() * 70;
                            return (
                              <div 
                                key={i} 
                                style={{
                                  height: `${height}%`,
                                  width: '8px',
                                  background: `linear-gradient(to top, rgba(99, 102, 241, 0.8), rgba(99, 102, 241, 0.3))`,
                                  borderRadius: '2px',
                                }}
                                className="cosmic-pulse"
                              />
                            );
                          })}
                        </div>
                      </div>
                    </div>
                    
                    <div>
                      <h4 className="text-sm font-medium text-slate-300 mb-2 flex items-center">
                        <Globe className="h-4 w-4 mr-2 text-indigo-400" />
                        Geographic Distribution
                      </h4>
                      <div className="grid grid-cols-2 sm:grid-cols-4 gap-2">
                        <div className="bg-slate-800/50 rounded p-2 text-xs border border-slate-700/30">
                          <div className="flex justify-between items-center">
                            <span className="text-slate-400">North America</span>
                            <span className="text-indigo-300">42%</span>
                          </div>
                          <Progress value={42} className="h-1 mt-1" />
                        </div>
                        <div className="bg-slate-800/50 rounded p-2 text-xs border border-slate-700/30">
                          <div className="flex justify-between items-center">
                            <span className="text-slate-400">Europe</span>
                            <span className="text-indigo-300">28%</span>
                          </div>
                          <Progress value={28} className="h-1 mt-1" />
                        </div>
                        <div className="bg-slate-800/50 rounded p-2 text-xs border border-slate-700/30">
                          <div className="flex justify-between items-center">
                            <span className="text-slate-400">Asia</span>
                            <span className="text-indigo-300">18%</span>
                          </div>
                          <Progress value={18} className="h-1 mt-1" />
                        </div>
                        <div className="bg-slate-800/50 rounded p-2 text-xs border border-slate-700/30">
                          <div className="flex justify-between items-center">
                            <span className="text-slate-400">Other</span>
                            <span className="text-indigo-300">12%</span>
                          </div>
                          <Progress value={12} className="h-1 mt-1" />
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
                
                <CardFooter className="border-t border-indigo-800/20 pt-4 relative z-10">
                  <Button variant="outline" className="border-indigo-700/30 text-indigo-300 hover:bg-indigo-950/50">
                    <Share2 className="h-4 w-4 mr-2" />
                    Export Analytics Report
                  </Button>
                </CardFooter>
              </Card>
            </TabsContent>
            
            <TabsContent value="settings">
              <Card className="bg-gradient-to-br from-slate-900 via-slate-900 to-purple-950/70 border-purple-900/30 overflow-hidden">
                <div className="absolute inset-0 opacity-20">
                  {Array.from({ length: 30 }).map((_, i) => (
                    <div 
                      key={i}
                      className="cosmic-star"
                      style={{
                        left: `${Math.random() * 100}%`,
                        top: `${Math.random() * 100}%`,
                        width: `${Math.random() * 2 + 1}px`,
                        height: `${Math.random() * 2 + 1}px`,
                        '--twinkle-duration': `${Math.random() * 5 + 2}s`,
                        '--twinkle-delay': `${Math.random() * 3}s`,
                      } as React.CSSProperties}
                    />
                  ))}
                </div>
                
                <CardHeader className="relative z-10 border-b border-purple-700/30">
                  <CardTitle className="text-transparent bg-clip-text bg-gradient-to-r from-purple-300 to-pink-300 flex items-center gap-2">
                    <Settings className="h-5 w-5 text-purple-400" />
                    Stream Settings
                  </CardTitle>
                  <CardDescription className="text-purple-200/70">
                    Configure your cosmic streaming experience
                  </CardDescription>
                </CardHeader>
                
                <CardContent className="relative z-10 pt-6">
                  <div className="grid grid-cols-1 gap-8">
                    <div>
                      <h4 className="text-md font-medium text-purple-200 mb-4 flex items-center">
                        <Shield className="h-4 w-4 mr-2 text-purple-400" />
                        Stream Security
                      </h4>
                      
                      <div className="space-y-4">
                        <div className="flex items-center justify-between p-3 bg-slate-900/60 rounded-md border border-purple-800/30 cosmic-pulse">
                          <div className="flex items-center">
                            <div className="rounded-full bg-purple-500/20 p-2 mr-3">
                              <Shield className="h-5 w-5 text-purple-400" />
                            </div>
                            <div>
                              <h5 className="text-sm font-medium text-white">Stream Key Rotation</h5>
                              <p className="text-xs text-slate-400">Auto-rotate your stream key every 30 days</p>
                            </div>
                          </div>
                          <div className="flex items-center">
                            <Badge className="bg-purple-600/30 text-purple-300 mr-2">Enabled</Badge>
                            <Button variant="ghost" size="sm" className="text-purple-300 hover:text-purple-100 hover:bg-purple-900/50">
                              Configure
                            </Button>
                          </div>
                        </div>
                        
                        <div className="flex items-center justify-between p-3 bg-slate-900/60 rounded-md border border-purple-800/30">
                          <div className="flex items-center">
                            <div className="rounded-full bg-purple-500/20 p-2 mr-3">
                              <Users className="h-5 w-5 text-purple-400" />
                            </div>
                            <div>
                              <h5 className="text-sm font-medium text-white">Viewer Privacy</h5>
                              <p className="text-xs text-slate-400">Control who can view your stream</p>
                            </div>
                          </div>
                          <div className="flex items-center">
                            <Badge className="bg-slate-700 text-slate-300 mr-2">Public</Badge>
                            <Button variant="ghost" size="sm" className="text-purple-300 hover:text-purple-100 hover:bg-purple-900/50">
                              Change
                            </Button>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <div>
                      <h4 className="text-md font-medium text-purple-200 mb-4 flex items-center">
                        <Zap className="h-4 w-4 mr-2 text-purple-400" />
                        Stream Quality
                      </h4>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div className="bg-slate-900/60 p-4 rounded-md border border-purple-800/30">
                          <h5 className="text-sm font-medium text-white mb-2">Video Quality</h5>
                          <div className="space-y-3">
                            <div>
                              <div className="flex justify-between text-xs text-slate-400 mb-1">
                                <span>Resolution</span>
                                <span className="text-purple-300">1080p</span>
                              </div>
                              <Progress value={75} className="h-1" />
                            </div>
                            <div>
                              <div className="flex justify-between text-xs text-slate-400 mb-1">
                                <span>Frame Rate</span>
                                <span className="text-purple-300">60 FPS</span>
                              </div>
                              <Progress value={85} className="h-1" />
                            </div>
                            <div>
                              <div className="flex justify-between text-xs text-slate-400 mb-1">
                                <span>Bitrate</span>
                                <span className="text-purple-300">6000 kbps</span>
                              </div>
                              <Progress value={70} className="h-1" />
                            </div>
                          </div>
                        </div>
                        
                        <div className="bg-slate-900/60 p-4 rounded-md border border-purple-800/30">
                          <h5 className="text-sm font-medium text-white mb-2">Audio Quality</h5>
                          <div className="space-y-3">
                            <div>
                              <div className="flex justify-between text-xs text-slate-400 mb-1">
                                <span>Sample Rate</span>
                                <span className="text-purple-300">48kHz</span>
                              </div>
                              <Progress value={90} className="h-1" />
                            </div>
                            <div>
                              <div className="flex justify-between text-xs text-slate-400 mb-1">
                                <span>Audio Bitrate</span>
                                <span className="text-purple-300">256 kbps</span>
                              </div>
                              <Progress value={80} className="h-1" />
                            </div>
                            <div>
                              <div className="flex justify-between text-xs text-slate-400 mb-1">
                                <span>Noise Reduction</span>
                                <span className="text-purple-300">Medium</span>
                              </div>
                              <Progress value={50} className="h-1" />
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    
                    <div className="mb-4">
                      <h4 className="text-md font-medium text-purple-200 mb-4 flex items-center">
                        <Rocket className="h-4 w-4 mr-2 text-purple-400" />
                        Advanced Options
                      </h4>
                      
                      <div className="bg-slate-900/60 p-4 rounded-md border border-purple-800/30">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                          <Button 
                            variant="outline" 
                            className="cosmic-button border-purple-700/30 text-purple-200 cosmic-pulse"
                          >
                            <Server className="h-4 w-4 mr-2" />
                            CDN Configuration
                          </Button>
                          <Button 
                            variant="outline" 
                            className="cosmic-button border-purple-700/30 text-purple-200 cosmic-pulse"
                          >
                            <Globe className="h-4 w-4 mr-2" />
                            Region Settings
                          </Button>
                          <Button 
                            variant="outline" 
                            className="cosmic-button border-purple-700/30 text-purple-200 cosmic-pulse"
                          >
                            <Activity className="h-4 w-4 mr-2" />
                            Latency Mode
                          </Button>
                          <Button 
                            variant="outline" 
                            className="cosmic-button border-purple-700/30 text-purple-200 cosmic-pulse"
                          >
                            <Tv className="h-4 w-4 mr-2" />
                            Encoder Settings
                          </Button>
                        </div>
                      </div>
                    </div>
                  </div>
                </CardContent>
                
                <CardFooter className="border-t border-purple-800/20 pt-4 relative z-10">
                  <Button className="bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white border-0 mr-2">
                    <Check className="h-4 w-4 mr-2" />
                    Save Settings
                  </Button>
                  <Button variant="outline" className="border-purple-700/30 text-purple-300 hover:bg-purple-950/50">
                    Reset to Default
                  </Button>
                </CardFooter>
              </Card>
            </TabsContent>
          </Tabs>
        </div>
      </div>
      
      {/* Stream Manager Dialog */}
      <AnimatePresence>
        {showStreamManager && (
          <motion.div 
            initial={{ opacity: 0 }} 
            animate={{ opacity: 1 }} 
            exit={{ opacity: 0 }}
            className="fixed inset-0 z-50 bg-black/80 backdrop-blur-sm flex items-center justify-center p-4"
          >
            <motion.div 
              initial={{ scale: 0.9, y: 20 }}
              animate={{ scale: 1, y: 0 }}
              exit={{ scale: 0.9, y: 20 }}
              className="w-full max-w-5xl h-[85vh] bg-gradient-to-b from-slate-900 to-indigo-950/80 rounded-xl shadow-[0_0_40px_rgba(138,43,226,0.3)] border border-indigo-800/30 relative overflow-hidden"
            >
              {/* Stream Manager Header */}
              <div className="p-4 border-b border-indigo-800/30 flex justify-between items-center">
                <h2 className="text-xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-indigo-400 to-purple-300">
                  Stream Manager
                </h2>
                <Button variant="ghost" size="icon" onClick={toggleStreamManager} className="text-indigo-300 hover:text-white hover:bg-indigo-950/50">
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <line x1="18" y1="6" x2="6" y2="18"></line>
                    <line x1="6" y1="6" x2="18" y2="18"></line>
                  </svg>
                </Button>
              </div>
              
              {/* Stream Manager Content - Layout with chat and analytics */}
              <div className="flex flex-col md:flex-row h-[calc(100%-65px)]">
                {/* Left panel - Stream and Controls */}
                <div className="md:w-2/3 h-full p-4 flex flex-col">
                  <div className="bg-black/40 rounded-lg flex-grow mb-4 border border-indigo-900/30">
                    <div className="h-full flex items-center justify-center">
                      {isLive ? (
                        <div className="w-full h-full p-4">
                          <div className="w-full h-full bg-gradient-to-br from-indigo-950/60 to-purple-950/60 rounded-lg flex items-center justify-center shadow-inner">
                            <div className="text-center">
                              <Radio className="h-12 w-12 text-red-500 mb-4 animate-pulse" />
                              <h3 className="text-2xl font-bold text-white mb-2">LIVE</h3>
                              <p className="text-indigo-300">
                                {Math.floor(streamDuration / 60)}:{(streamDuration % 60).toString().padStart(2, '0')}
                              </p>
                              <div className="mt-4 flex items-center justify-center space-x-3">
                                <Badge className="bg-indigo-900/50 text-indigo-200">
                                  <Users className="h-3 w-3 mr-1" /> {viewerCount} viewers
                                </Badge>
                                <Badge className="bg-purple-900/50 text-purple-200">
                                  <MessageCircle className="h-3 w-3 mr-1" /> {chatCount} messages
                                </Badge>
                              </div>
                            </div>
                          </div>
                        </div>
                      ) : (
                        <div className="text-center p-8">
                          <Video className="h-16 w-16 text-indigo-400/50 mx-auto mb-4" />
                          <h3 className="text-xl font-medium text-white mb-2">Stream Preview</h3>
                          <p className="text-indigo-300/80 max-w-md mx-auto mb-6">
                            Click the "Go Live" button to start your stream or set up your mobile streaming
                          </p>
                          <Button 
                            onClick={toggleStreamSetup}
                            className="bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700"
                          >
                            <Play className="h-4 w-4 mr-2" />
                            Set Up Stream
                          </Button>
                        </div>
                      )}
                    </div>
                  </div>
                  
                  {/* Stream Controls */}
                  <div className="bg-slate-900/70 rounded-lg p-4 border border-indigo-900/30 cosmic-pulse">
                    <h3 className="text-lg font-medium text-white mb-3">Stream Controls</h3>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                      <Button 
                        variant="outline" 
                        className="border-indigo-700/30 text-indigo-300 hover:bg-indigo-900/50"
                        onClick={isLive ? toggleLiveStatus : toggleStreamSetup}
                      >
                        {isLive ? (
                          <>
                            <Pause className="h-4 w-4 mr-2 text-red-400" />
                            End Stream
                          </>
                        ) : (
                          <>
                            <Play className="h-4 w-4 mr-2 text-green-400" />
                            Go Live
                          </>
                        )}
                      </Button>
                      
                      <Button 
                        variant="outline" 
                        className="border-indigo-700/30 text-indigo-300 hover:bg-indigo-900/50"
                        onClick={toggleChatViewer}
                      >
                        <MessageCircle className="h-4 w-4 mr-2" />
                        Chat
                      </Button>
                      
                      <Button 
                        variant="outline" 
                        className="border-indigo-700/30 text-indigo-300 hover:bg-indigo-900/50"
                      >
                        <Mic className="h-4 w-4 mr-2" />
                        Audio
                      </Button>
                      
                      <Button 
                        variant="outline" 
                        className="border-indigo-700/30 text-indigo-300 hover:bg-indigo-900/50"
                      >
                        <Tv className="h-4 w-4 mr-2" />
                        Layout
                      </Button>
                    </div>
                  </div>
                </div>
                
                {/* Right panel - Chat and Analytics */}
                <div className="md:w-1/3 h-full p-4 flex flex-col">
                  <div className="bg-slate-900/70 rounded-lg flex-grow border border-indigo-900/30 flex flex-col overflow-hidden">
                    <div className="p-3 border-b border-indigo-800/30 flex justify-between items-center">
                      <h3 className="text-md font-medium text-white">Live Chat</h3>
                      <Badge className="bg-indigo-900/70 text-indigo-200">
                        {isLive ? 'Active' : 'Inactive'}
                      </Badge>
                    </div>
                    
                    <div className="flex-grow overflow-y-auto p-3 space-y-3 custom-scrollbar">
                      {isLive ? (
                        <>
                          {/* Sample chat messages */}
                          {Array.from({ length: 6 }).map((_, i) => (
                            <div key={i} className="bg-slate-950/50 rounded p-2 border border-indigo-900/20">
                              <div className="flex items-center gap-2">
                                <div className="w-6 h-6 rounded-full bg-gradient-to-br from-indigo-600 to-purple-700 flex items-center justify-center text-xs text-white font-bold">
                                  {String.fromCharCode(65 + i)}
                                </div>
                                <p className="text-sm">
                                  <span className="font-medium text-indigo-300">Cosmic{i+1}</span>
                                  <span className="text-slate-400">: {["Amazing stream!", "Love the cosmic vibes!", "When is the next event?", "Great content as always!", "Can you show that again?", "Thanks for streaming!"][i]}</span>
                                </p>
                              </div>
                            </div>
                          ))}
                          
                          {/* Donation message */}
                          <div className="bg-gradient-to-r from-indigo-900/30 to-purple-900/30 rounded p-2 border border-purple-700/30 cosmic-pulse">
                            <div className="flex items-center gap-2">
                              <div className="w-6 h-6 rounded-full bg-gradient-to-br from-yellow-500 to-orange-500 flex items-center justify-center text-xs text-white font-bold">
                                <GiftIcon className="h-3 w-3" />
                              </div>
                              <div>
                                <p className="text-sm">
                                  <span className="font-medium text-yellow-300">CosmicDonor</span>
                                  <span className="text-white"> donated $5.00</span>
                                </p>
                                <p className="text-xs text-slate-300">Keep up the great content!</p>
                              </div>
                            </div>
                          </div>
                        </>
                      ) : (
                        <div className="h-full flex items-center justify-center">
                          <div className="text-center p-4">
                            <MessageCircle className="h-10 w-10 text-indigo-500/40 mx-auto mb-3" />
                            <p className="text-indigo-300/70">Chat is inactive until you go live</p>
                          </div>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
      
      {/* Mobile Stream Setup Dialog */}
      <Dialog open={showStreamSetup} onOpenChange={setShowStreamSetup}>
        <DialogContent className="bg-gradient-to-br from-slate-900 to-indigo-950/90 border-indigo-800/30 text-white max-w-md">
          <DialogHeader>
            <DialogTitle className="text-transparent bg-clip-text bg-gradient-to-r from-indigo-400 to-purple-300 flex items-center">
              <Smartphone className="h-5 w-5 mr-2 text-indigo-400" />
              Mobile Stream Setup
            </DialogTitle>
            <DialogDescription className="text-indigo-200/70">
              Configure your mobile stream settings before going live
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4 py-3">
            <div className="space-y-2">
              <label className="text-sm font-medium text-indigo-200" htmlFor="stream-title">
                Stream Title
              </label>
              <Input 
                id="stream-title"
                placeholder="Enter your stream title"
                value={streamTitle}
                onChange={(e) => setStreamTitle(e.target.value)}
                className="bg-slate-950/80 border-indigo-700/30 text-white"
              />
            </div>
            
            <div className="space-y-2">
              <label className="text-sm font-medium text-indigo-200">
                Stream Category
              </label>
              <Select value={streamCategory} onValueChange={setStreamCategory}>
                <SelectTrigger className="w-full bg-slate-950/80 border-indigo-700/30 text-white">
                  <SelectValue placeholder="Select category" />
                </SelectTrigger>
                <SelectContent className="bg-slate-900 border-indigo-700/30 text-white">
                  <SelectItem value="gaming">Gaming</SelectItem>
                  <SelectItem value="irl">IRL / Just Chatting</SelectItem>
                  <SelectItem value="music">Music</SelectItem>
                  <SelectItem value="creative">Creative</SelectItem>
                  <SelectItem value="events">Events</SelectItem>
                  <SelectItem value="educational">Educational</SelectItem>
                </SelectContent>
              </Select>
            </div>
            
            {streamCategory === "gaming" && (
              <div className="space-y-2">
                <label className="text-sm font-medium text-indigo-200" htmlFor="game-name">
                  Game Name
                </label>
                <Input 
                  id="game-name"
                  placeholder="Enter game name"
                  value={streamGame}
                  onChange={(e) => setStreamGame(e.target.value)}
                  className="bg-slate-950/80 border-indigo-700/30 text-white"
                />
              </div>
            )}
            
            <div className="space-y-3 pt-2">
              <h4 className="text-sm font-medium text-indigo-200">Mobile Stream Options</h4>
              
              <div className="flex items-center justify-between p-3 bg-slate-950/80 rounded-md border border-indigo-800/20">
                <div className="flex items-center">
                  <Camera className="h-4 w-4 mr-2 text-indigo-400" />
                  <span className="text-sm text-white">Camera</span>
                </div>
                <Button 
                  variant="outline" 
                  size="sm" 
                  className={`${isCameraEnabled ? 'bg-indigo-900/50 text-indigo-300' : 'bg-slate-800/50 text-slate-400'} border-indigo-800/30`}
                  onClick={() => setIsCameraEnabled(!isCameraEnabled)}
                >
                  {isCameraEnabled ? 'Enabled' : 'Disabled'}
                </Button>
              </div>
              
              <div className="flex items-center justify-between p-3 bg-slate-950/80 rounded-md border border-indigo-800/20">
                <div className="flex items-center">
                  <Mic className="h-4 w-4 mr-2 text-indigo-400" />
                  <span className="text-sm text-white">Microphone</span>
                </div>
                <Button 
                  variant="outline" 
                  size="sm" 
                  className={`${isMicEnabled ? 'bg-indigo-900/50 text-indigo-300' : 'bg-slate-800/50 text-slate-400'} border-indigo-800/30`}
                  onClick={() => setIsMicEnabled(!isMicEnabled)}
                >
                  {isMicEnabled ? 'Enabled' : 'Disabled'}
                </Button>
              </div>
            </div>
          </div>
          
          <DialogFooter className="border-t border-indigo-800/20 pt-3">
            <Button 
              variant="outline" 
              className="border-indigo-700/30 text-indigo-300 hover:bg-indigo-900/50"
              onClick={() => setShowStreamSetup(false)}
            >
              Cancel
            </Button>
            <Button 
              className="bg-gradient-to-r from-indigo-600 to-purple-600 hover:from-indigo-700 hover:to-purple-700 text-white"
              onClick={startMobileStream}
              disabled={!streamTitle.trim()}
            >
              <Smartphone className="h-4 w-4 mr-2" />
              Start Mobile Stream
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
      
      {/* Chat Viewer Modal (conditionally displayed) */}
      {showChatViewer && (
        <div className="fixed inset-0 bg-black/95 backdrop-blur-sm z-50 flex items-center justify-center p-4 animate-in fade-in duration-300">
          <div className="relative w-full max-w-2xl h-[85vh] overflow-hidden rounded-2xl shadow-[0_0_35px_rgba(138,43,226,0.3)]" 
            style={{ 
              background: 'radial-gradient(circle at center, rgba(25, 25, 40, 0.9) 0%, rgba(10, 10, 20, 0.95) 70%, rgba(5, 5, 15, 0.98) 100%)', 
              boxShadow: '0 0 40px rgba(138, 43, 226, 0.4), inset 0 0 20px rgba(88, 28, 135, 0.3)', 
              borderImage: 'linear-gradient(135deg, rgba(125, 39, 255, 0.8), rgba(65, 20, 138, 0.2), rgba(125, 39, 255, 0.8)) 1', 
              borderWidth: '1px', 
              borderStyle: 'solid' 
            }}>
            {/* Modal Content - Close button */}
            <div className="flex justify-end p-4">
              <Button
                variant="ghost"
                size="icon"
                onClick={toggleChatViewer}
                className="text-purple-300 hover:text-white hover:bg-purple-900/50"
              >
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-x">
                  <line x1="18" y1="6" x2="6" y2="18"></line>
                  <line x1="6" y1="6" x2="18" y2="18"></line>
                </svg>
              </Button>
            </div>
            
            {/* Modal Content - Chat viewer */}
            <div className="p-4">
              <h2 className="text-2xl font-bold text-center mb-4 text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-300">
                Cosmic Chat Viewer
              </h2>
              <p className="text-center text-purple-200/70 mb-6">
                Monitor your chat in a beautiful space-themed interface
              </p>
              
              <Button 
                className="bg-gradient-to-r from-purple-600 to-indigo-600 text-white hover:from-purple-700 hover:to-indigo-700 border-none"
                onClick={toggleChatViewer}
              >
                Return to Stream
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default StreamingPage;
