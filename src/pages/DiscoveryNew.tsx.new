import React, { useState, useEffect, useRef } from 'react';
import { useNavigate } from 'react-router-dom';
import { Search, X, Sparkles, ChevronLeft, ChevronRight, ArrowLeft, MessageSquare, Zap } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import RealtimeChat from '@/components/messages/RealtimeChat';
import { useAuth } from '@/contexts/AuthContext';
import { useSwipeable } from 'react-swipeable';
import { motion, AnimatePresence } from 'framer-motion';
import { debounce } from 'lodash';
import '../styles/discovery-retro.css';

// Mobile-specific styles
const mobileStyles = `
  @media (max-width: 640px) {
    .channel-card {
      min-height: 180px;
    }
    .channel-title {
      font-size: 0.8rem;
    }
    .live-dot {
      font-size: 0.6rem;
      padding: 2px 4px;
    }
  }
`;

interface Streamer {
  id: string;
  username: string;
  display_name: string;
  avatar_url: string;
  is_live: boolean;
  follower_count: number;
  bio?: string;
  game?: string;
  clips?: any[];
}

interface Channel {
  id: string;
  name: string;
  description: string;
  thumbnail: string;
  type: string;
  viewers: number;
}

const DiscoveryNew: React.FC = () => {
  const navigate = useNavigate();
  const { user } = useAuth();
  const containerRef = useRef<HTMLDivElement>(null);
  
  // State management
  const [activeTab, setActiveTab] = useState('discover');
  const [showChat, setShowChat] = useState(false);
  const [chatPartnerId, setChatPartnerId] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [currentStreamerIndex, setCurrentStreamerIndex] = useState(0);
  const [currentChannelIndex, setCurrentChannelIndex] = useState(0);
  const [streamers, setStreamers] = useState<Streamer[]>([]);
  const [selectedStreamType, setSelectedStreamType] = useState('all');
  const [channels, setChannels] = useState<Channel[]>([]);
  const [allChannels, setAllChannels] = useState<Channel[]>([]);
  const [currentPageIndex, setCurrentPageIndex] = useState(0);
  const [totalPages, setTotalPages] = useState(1);
  const [view, setView] = useState('channel'); // Default to channel view with 4 streams
  const [searchLoading, setSearchLoading] = useState(false);
  const [showSearch, setShowSearch] = useState(false);
  const [filteredStreamers, setFilteredStreamers] = useState<Streamer[]>([]);
  const [searchResults, setSearchResults] = useState<{
    users: Streamer[];
    games: { id: string; name: string; cover_url: string }[];
  }>({ users: [], games: [] });
  const [tetrisAnimation, setTetrisAnimation] = useState(false);
  const [animatingBlocks, setAnimatingBlocks] = useState(false);
  
  // Add mobile styles to head
  useEffect(() => {
    const styleEl = document.createElement('style');
    styleEl.innerHTML = mobileStyles;
    document.head.appendChild(styleEl);
    return () => {
      document.head.removeChild(styleEl);
    };
  }, []);

  // Categories for the bottom navigation
  const categories = [
    { id: 'discover', name: 'Discover', icon: <Sparkles size={14} className="mr-1" /> },
    { id: 'trending', name: 'Trending', icon: <Zap size={14} className="mr-1" /> }
  ];

  // Enhanced swipe handlers for mobile
  const swipeHandlers = useSwipeable({
    onSwipedLeft: () => handleNextPage(),
    onSwipedRight: () => handlePrevPage(),
    trackMouse: true,
    trackTouch: true,
    delta: 10,  // Lower threshold for swipe detection
    swipeDuration: 500  // Allow slightly longer swipes
  });

  // Function to handle navigation to game page
  const handleGameSelect = (gameId: string, gameName: string) => {
    navigate(`/game/${gameId}?name=${encodeURIComponent(gameName)}`);
  };

  // Page navigation handlers with horizontal scrolling support
  const handleNextPage = () => {
    if (currentPageIndex < totalPages - 1) {
      setCurrentPageIndex(prevIndex => prevIndex + 1);
      
      // Scroll to next set of streamers if in horizontal streaming view
      const container = document.getElementById('streamer-scroll-container');
      if (container) {
        const scrollAmount = container.clientWidth;
        container.scrollBy({
          left: scrollAmount,
          behavior: 'smooth'
        });
      }
    } else {
      setCurrentPageIndex(0);
      
      // Scroll back to beginning
      const container = document.getElementById('streamer-scroll-container');
      if (container) {
        container.scrollTo({
          left: 0,
          behavior: 'smooth'
        });
      }
    }
  };

  const handlePrevPage = () => {
    if (currentPageIndex > 0) {
      setCurrentPageIndex(prevIndex => prevIndex - 1);
      
      // Scroll to previous set of streamers
      const container = document.getElementById('streamer-scroll-container');
      if (container) {
        const scrollAmount = container.clientWidth;
        container.scrollBy({
          left: -scrollAmount,
          behavior: 'smooth'
        });
      }
    } else {
      setCurrentPageIndex(totalPages - 1);
      
      // Scroll to end
      const container = document.getElementById('streamer-scroll-container');
      if (container) {
        container.scrollTo({
          left: container.scrollWidth,
          behavior: 'smooth'
        });
      }
    }
  };

  // Handle touch events for better mobile experience
  useEffect(() => {
    const handleTouchStart = (e: TouchEvent) => {
      const touchX = e.touches[0].clientX;
      
      // Store initial touch position
      sessionStorage.setItem('touchStartX', touchX.toString());
    };

    const handleTouchEnd = (e: TouchEvent) => {
      const touchEndX = e.changedTouches[0].clientX;
      const touchStartX = Number(sessionStorage.getItem('touchStartX') || '0');
      const screenWidth = window.innerWidth;
      const swipeThreshold = screenWidth * 0.15; // 15% of screen width
      
      // Calculate swipe distance
      const swipeDistance = touchEndX - touchStartX;
      
      // Handle swipe based on distance
      if (Math.abs(swipeDistance) > swipeThreshold) {
        if (swipeDistance > 0) {
          // Swipe right
          handlePrevPage();
        } else {
          // Swipe left
          handleNextPage();
        }
      }
    };

    // Add event listeners
    const contentElement = document.getElementById('discovery-content');
    if (contentElement) {
      contentElement.addEventListener('touchstart', handleTouchStart);
      contentElement.addEventListener('touchend', handleTouchEnd);
    }

    // Clean up
    return () => {
      if (contentElement) {
        contentElement.removeEventListener('touchstart', handleTouchStart);
        contentElement.removeEventListener('touchend', handleTouchEnd);
      }
    };
  }, []);

  // Initialize setup
  useEffect(() => {
    // Set trophies to 0 on the top Clipts page
    localStorage.setItem('clipt_trophies', '0');
    
    // Auto-play streams logic would be implemented here
    // In a real implementation, this would connect to a streaming service
    console.log('Auto-playing streams initialized');
  }, []);

  // Mock data for streamers and channels
  useEffect(() => {
    // This would be fetched from an API in a real app
    const mockStreamers: Streamer[] = [
      {
        id: '1',
        username: 'coolstreamer',
        display_name: 'Cool Streamer',
        avatar_url: 'https://placehold.co/400x400/121212/6F4CFF?text=CS',
        is_live: true,
        follower_count: 1200,
        game: 'Fortnite',
        clips: []
      },
      {
        id: '2',
        username: 'progamer',
        display_name: 'Pro Gamer',
        avatar_url: 'https://placehold.co/400x400/121212/FF4CFF?text=PG',
        is_live: true,
        follower_count: 5600,
        game: 'Call of Duty',
        clips: []
      },
      {
        id: '3',
        username: 'casualgamer',
        display_name: 'Casual Gamer',
        avatar_url: 'https://placehold.co/400x400/121212/4CFF4C?text=CG',
        is_live: false,
        follower_count: 890,
        game: 'Minecraft',
        clips: []
      },
      {
        id: '4',
        username: 'speedrunner',
        display_name: 'Speed Runner',
        avatar_url: 'https://placehold.co/400x400/121212/4CFFFF?text=SR',
        is_live: true,
        follower_count: 3400,
        game: 'Super Mario 64',
        clips: []
      },
      {
        id: '5',
        username: 'rpglover',
        display_name: 'RPG Lover',
        avatar_url: 'https://placehold.co/400x400/121212/FF4C4C?text=RL',
        is_live: true,
        follower_count: 2100,
        game: 'Final Fantasy XVI',
        clips: []
      },
      {
        id: '6',
        username: 'strategymastermind',
        display_name: 'Strategy Mastermind',
        avatar_url: 'https://placehold.co/400x400/121212/FFFF4C?text=SM',
        is_live: true,
        follower_count: 1800,
        game: 'Civilization VI',
        clips: []
      }
    ];

    setStreamers(mockStreamers);

    // Generate mock channels (4 pages of content)
    const mockChannels: Channel[] = [
      {
        id: '1',
        name: 'Late Night Gaming',
        description: 'Chill vibes and late night gaming sessions',
        thumbnail: 'https://placehold.co/640x360/151030/6F4CFF?text=Late+Night',
        type: 'chill',
        viewers: 1200
      },
      {
        id: '2',
        name: 'Competitive FPS',
        description: 'High-skill FPS gameplay',
        thumbnail: 'https://placehold.co/640x360/301510/FF4C4C?text=FPS',
        type: 'fps',
        viewers: 3500
      },
      {
        id: '3',
        name: 'Speedrunning',
        description: 'Fastest game completions',
        thumbnail: 'https://placehold.co/640x360/103015/4CFF4C?text=Speed',
        type: 'speed',
        viewers: 1800
      },
      {
        id: '4',
        name: 'Game Development',
        description: 'Watch games being made',
        thumbnail: 'https://placehold.co/640x360/101530/4C4CFF?text=Game+Dev',
        type: 'dev',
        viewers: 950
      },
      {
        id: '5',
        name: 'Battle Royale Pros',
        description: 'Competitive battle royale action',
        thumbnail: 'https://placehold.co/640x360/152030/6FFF4C?text=Battle+Royale',
        type: 'battle',
        viewers: 3200
      },
      {
        id: '6',
        name: 'RPG Quests',
        description: 'Epic role-playing adventures',
        thumbnail: 'https://placehold.co/640x360/301520/FF8C4C?text=RPG+Quests',
        type: 'rpg',
        viewers: 1450
      },
      {
        id: '7',
        name: 'Strategy Masters',
        description: 'Big brain strategy gameplay',
        thumbnail: 'https://placehold.co/640x360/253010/FFFF4C?text=Strategy',
        type: 'strategy',
        viewers: 1100
      },
      {
        id: '8',
        name: 'Fighting Games',
        description: 'Competitive fighting game tournaments',
        thumbnail: 'https://placehold.co/640x360/301025/FF4CFF?text=Fighting',
        type: 'fighting',
        viewers: 2200
      }
    ];
    
    setAllChannels(mockChannels);
    setChannels(mockChannels.slice(0, 4));
    setTotalPages(Math.ceil(mockChannels.length / 4));
  }, []);

  // Process streamer data when it changes
  useEffect(() => {
    // First filter by search term if provided
    let filtered = searchTerm.trim()
      ? streamers.filter(s => 
          s.display_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
          (s.game && s.game.toLowerCase().includes(searchTerm.toLowerCase()))
        )
      : streamers;
    
    // Then filter based on selected type
    if (selectedStreamType !== 'all') {
      filtered = filtered.filter(s => s.game && s.game.toLowerCase().includes(selectedStreamType));
    }
    
    // Always limit to 4 streamers maximum
    setFilteredStreamers(filtered.slice(0, 4));
  }, [streamers, selectedStreamType, searchTerm]);

  // Handle search input change with debounce
  const handleSearch = debounce((e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchTerm(e.target.value);
  }, 300);

  // Navigate to advanced search page
  const navigateToAdvancedSearch = () => {
    navigate('/search');
  };

  return (
    <div className="discovery-container text-white" id="discovery-content" {...swipeHandlers}>
      {/* Header with retro discovery title */}
      <div className="discovery-header px-4 pt-3 pb-2">
        {/* Retro-styled DISCOVERY title */}
        <div className="text-center mb-1">
          <h1 className="retro-discovery-title">DISCOVERY</h1>
        </div>

        {/* Navigation buttons */}
        <div className="flex justify-between items-center py-2">
          <Button 
            variant="ghost" 
            size="sm" 
            className="text-white" 
            onClick={() => navigate('/home')}
          >
            <ArrowLeft size={18} className="mr-1" />
            Back
          </Button>
          
          <Button 
            variant="ghost" 
            size="sm" 
            className="text-white" 
            onClick={() => setShowChat(true)}
          >
            <MessageSquare size={18} className="mr-1" />
            Chat
          </Button>
        </div>
        
        {/* Search bar */}
        <div className="relative mt-3 mb-4">
          <div 
            className="search-container relative cursor-pointer group transition-all" 
            onClick={navigateToAdvancedSearch}
          >
            <div className="flex items-center w-full p-3 bg-gray-900/60 border-2 border-cyan-700 hover:border-cyan-500 rounded-md transition-all group-hover:shadow-lg group-hover:shadow-cyan-900/30">
              <Search size={18} className="text-cyan-500 mr-2" />
              <span className="text-gray-400">Search for streamers or games...</span>
            </div>
            <div className="absolute right-3 top-1/2 transform -translate-y-1/2 flex space-x-1">
              <span className="search-tag bg-purple-900 text-xs px-2 py-1 rounded-full text-purple-200 border border-purple-700">Users</span>
              <span className="search-tag bg-cyan-900 text-xs px-2 py-1 rounded-full text-cyan-200 border border-cyan-700">Games</span>
            </div>
          </div>
        </div>
      </div>

      {/* Main content */}
      <div className="discovery-content p-4">
        <div className="flex justify-between items-center mb-3">
          <h2 className="discovery-subtitle">
            <span>EXPLORE</span>
            <span className="text-xs text-cyan-400 ml-2">STREAMS</span>
          </h2>
        </div>
        
        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4" id="streamer-scroll-container">
          {filteredStreamers && filteredStreamers.length > 0 ? (
            filteredStreamers.map(streamer => (
              <div 
                key={streamer.id} 
                className="stream-block bg-gaming-800 rounded-md p-3 border border-purple-900/30 hover:border-purple-500/50 transition-all"
              >
                <div className="flex items-center gap-3">
                  <div className="relative">
                    <div className="w-12 h-12 rounded-full bg-gaming-700 flex items-center justify-center overflow-hidden">
                      {streamer.avatar_url ? (
                        <img src={streamer.avatar_url} alt={streamer.display_name} className="w-full h-full object-cover" />
                      ) : (
                        <span>{streamer.display_name.charAt(0)}</span>
                      )}
                    </div>
                    {streamer.is_live && (
                      <div className="absolute -top-1 -right-1 bg-red-500 w-3 h-3 rounded-full border border-gaming-800"></div>
                    )}
                  </div>
                  <div>
                    <h3 className="text-md font-semibold">{streamer.display_name}</h3>
                    <p className="text-xs text-gray-400">{streamer.game}</p>
                  </div>
                </div>
              </div>
            ))
          ) : (
            <div className="col-span-2 text-center py-8 text-gray-400">
              No streamers found matching your criteria
            </div>
          )}
        </div>
      </div>

      {/* Tetris-inspired game controls */}
      <div className="flex justify-center gap-4 mb-6 mt-4">
        <button 
          onClick={() => setTetrisAnimation(!tetrisAnimation)} 
          className="px-4 py-2 bg-purple-700 text-white rounded-md hover:bg-purple-600 transition-all"
        >
          {tetrisAnimation ? 'Pause Animation' : 'Start Animation'}
        </button>
        <button 
          onClick={() => setAnimatingBlocks(prev => !prev)} 
          className="px-4 py-2 bg-cyan-700 text-white rounded-md hover:bg-cyan-600 transition-all"
        >
          Shuffle Blocks
        </button>
      </div>

      {/* Chat overlay with AnimatePresence */}
      <AnimatePresence>
        {showChat && (
          <motion.div 
            className="fixed inset-0 bg-black/80 z-50 flex items-center justify-center"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
          >
            <div className="w-full h-full max-w-md mx-auto">
              <RealtimeChat
                partnerId={chatPartnerId || streamers[0]?.id || ''}
                partnerInfo={{
                  id: chatPartnerId || streamers[0]?.id || '',
                  username: streamers.find(s => s.id === chatPartnerId)?.username || streamers[0]?.username || '',
                  displayName: streamers.find(s => s.id === chatPartnerId)?.display_name || streamers[0]?.display_name || '',
                  avatarUrl: streamers.find(s => s.id === chatPartnerId)?.avatar_url || streamers[0]?.avatar_url || ''
                }}
                onClose={() => setShowChat(false)}
              />
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Bottom navigation - pagination and swipe indicators */}
      <div className="fixed bottom-0 left-0 right-0 bg-gaming-900 border-t border-purple-900/30 px-2 py-1">
        <div className="flex justify-between items-center">
          <Button variant="ghost" size="sm" onClick={() => navigate('/home')}>
            <ArrowLeft size={18} />
          </Button>
          
          <div className="flex space-x-2 items-center">
            <Button 
              variant="ghost" 
              size="icon" 
              className="text-white p-1" 
              onClick={handlePrevPage}>
              <ChevronLeft size={14} />
            </Button>
            
            <div className="flex space-x-1">
              {Array.from({ length: totalPages }).map((_, index) => (
                <div 
                  key={index}
                  className={`w-2 h-2 rounded-full ${
                    index === currentPageIndex 
                      ? 'bg-purple-500' 
                      : 'bg-purple-900'
                  }`}
                  onClick={() => setCurrentPageIndex(index)}
                />
              ))}
            </div>
            
            <Button 
              variant="ghost" 
              size="icon" 
              className="text-white p-1" 
              onClick={handleNextPage}>
              <ChevronRight size={14} />
            </Button>
          </div>
          
          <Button variant="ghost" size="sm" onClick={() => setShowChat(true)}>
            <MessageSquare size={18} />
          </Button>
        </div>
      </div>
    </div>
  );
};

export default DiscoveryNew;
