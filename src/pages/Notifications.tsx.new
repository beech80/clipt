import React, { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useAuth } from '@/contexts/AuthContext';
import { supabase } from '@/lib/supabase';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { formatDistanceToNow } from 'date-fns';
import { useNavigate } from 'react-router-dom';
import { Heart, MessageSquare, Award, User, Bell, Check, CheckCheck, Users, Sparkles, Gamepad2, AlertCircle, Zap } from 'lucide-react';
import { toast } from 'sonner';
import InviteFriendsDialog from '@/components/invite/InviteFriendsDialog';
import '../styles/notification-effects.css';
import { motion, AnimatePresence } from 'framer-motion';

interface Notification {
  id: string;
  type: 'follow' | 'like' | 'comment' | 'mention' | 'stream_live' | 'reply' | 'achievement' | 'rank';
  content: string;
  created_at: string;
  read: boolean;
  actor_id: string;
  user_id: string;
  resource_id?: string;
  resource_type?: string;
  actor: {
    username: string | null;
    avatar_url: string | null;
  } | null;
}

const NotificationIcon = ({ type }: { type: Notification['type'] }) => {
  const iconClasses = "h-5 w-5";
  
  switch (type) {
    case 'like':
      return (
        <div className="notification-icon like-notification">
          <Heart className={iconClasses} />
        </div>
      );
    case 'comment':
    case 'reply':
      return (
        <div className="notification-icon comment-notification">
          <MessageSquare className={iconClasses} />
        </div>
      );
    case 'follow':
      return (
        <div className="notification-icon follow-notification">
          <User className={iconClasses} />
        </div>
      );
    case 'achievement':
      return (
        <div className="notification-icon achievement-notification">
          <Sparkles className={iconClasses} />
        </div>
      );
    case 'rank':
      return (
        <div className="notification-icon achievement-notification">
          <Award className={iconClasses} />
        </div>
      );
    case 'stream_live':
      return (
        <div className="notification-icon">
          <Zap className={iconClasses} />
        </div>
      );
    default:
      return (
        <div className="notification-icon">
          <Bell className={iconClasses} />
        </div>
      );
  }
};

const NotificationsPage = () => {
  const { user } = useAuth();
  const queryClient = useQueryClient();
  const navigate = useNavigate();
  const [activeTab, setActiveTab] = useState<'all' | 'unread'>('all');
  const [inviteDialogOpen, setInviteDialogOpen] = useState(false);
  
  // Animation variants
  const containerVariants = {
    hidden: { opacity: 0 },
    visible: { 
      opacity: 1,
      transition: { 
        duration: 0.5,
        when: "beforeChildren",
        staggerChildren: 0.1
      }
    }
  };
  
  const itemVariants = {
    hidden: { y: 20, opacity: 0 },
    visible: { y: 0, opacity: 1, transition: { duration: 0.3 } }
  };
  
  const pulseVariants = {
    pulse: {
      scale: [1, 1.05, 1],
      opacity: [0.7, 1, 0.7],
      transition: { duration: 2, repeat: Infinity }
    }
  };

  const { data: notifications = [], isLoading } = useQuery({
    queryKey: ['notifications', user?.id, activeTab],
    queryFn: async () => {
      const query = supabase
        .from('notifications')
        .select(`
          *,
          actor:profiles!notifications_actor_id_fkey(username, avatar_url)
        `)
        .eq('user_id', user?.id)
        .order('created_at', { ascending: false });

      if (activeTab === 'unread') {
        query.eq('read', false);
      }

      const { data, error } = await query;

      if (error) throw error;
      return data as unknown as Notification[];
    },
    enabled: !!user,
  });

  // Mark a notification as read
  const markAsRead = useMutation({
    mutationFn: async (notificationId: string) => {
      const { error } = await supabase
        .from('notifications')
        .update({ read: true })
        .eq('id', notificationId);

      if (error) throw error;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['notifications'] });
    },
    onError: () => {
      toast.error("Failed to mark notification as read");
    },
  });

  // Mark all notifications as read
  const markAllAsRead = useMutation({
    mutationFn: async () => {
      const { error } = await supabase
        .from('notifications')
        .update({ read: true })
        .eq('user_id', user?.id)
        .eq('read', false);

      if (error) throw error;
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['notifications'] });
      toast.success("All notifications marked as read");
    },
    onError: () => {
      toast.error("Failed to mark all notifications as read");
    },
  });

  const handleNotificationClick = (notification: Notification) => {
    // Mark as read
    if (!notification.read) {
      markAsRead.mutate(notification.id);
    }

    // Navigate based on notification type and resource
    if (notification.resource_type === 'post' && notification.resource_id) {
      navigate(`/post/${notification.resource_id}`);
    } else if (notification.type === 'follow') {
      navigate(`/profile/${notification.actor_id}`);
    } else if (notification.type === 'achievement') {
      navigate('/achievements');
    } else if (notification.type === 'stream_live') {
      navigate(`/streamer/${notification.actor_id}`);
    }
  };

  // Group notifications by date
  const notificationGroups = React.useMemo(() => {
    if (!notifications.length) return [];
    
    // Group by date (string representation of date)
    const groups = new Map<string, Notification[]>();
    
    notifications.forEach(notification => {
      const date = new Date(notification.created_at).toDateString();
      if (!groups.has(date)) {
        groups.set(date, []);
      }
      groups.get(date)?.push(notification);
    });
    
    return Array.from(groups.entries());
  }, [notifications]);

  if (!user) {
    return (
      <div className="text-center py-12">Please log in to view notifications</div>
    );
  }

  return (
    <motion.div 
      className="container py-8 max-w-3xl"
      initial="hidden"
      animate="visible"
      variants={containerVariants}
    >
      <div className="retro-scanline">
        <motion.div 
          className="flex items-center justify-between mb-6"
          variants={itemVariants}
        >
          <div className="flex items-center">
            <Gamepad2 className="h-6 w-6 mr-2 text-purple-400" />
            <h1 className="text-3xl font-bold neon-text">NOTIFICATIONS</h1>
            <motion.div 
              animate="pulse" 
              variants={pulseVariants}
              className="ml-2"
            >
              <Sparkles className="h-5 w-5 text-yellow-400" />
            </motion.div>
          </div>
          
          <div className="flex items-center gap-2">
            {notifications.some(n => !n.read) && (
              <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                <Button 
                  className="mark-all-button"
                  onClick={() => markAllAsRead.mutate()}
                  disabled={markAllAsRead.isPending}
                >
                  <CheckCheck className="h-4 w-4 mr-1" />
                  Mark all as read
                </Button>
              </motion.div>
            )}
            
            <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
              <Button
                className="gameboy-button"
                onClick={() => setInviteDialogOpen(true)}
              >
                <Users className="h-4 w-4 mr-1" />
                Invite Friends
              </Button>
            </motion.div>
          </div>
        </motion.div>
      </div>

      <motion.div variants={itemVariants}>
        <Tabs 
          defaultValue={activeTab} 
          onValueChange={(value) => setActiveTab(value as 'all' | 'unread')} 
          className="w-full notification-tabs"
        >
          <TabsList className="grid w-full grid-cols-2 mb-4 notification-tab-header">
            <TabsTrigger
              value="all"
              className="flex items-center justify-center gap-1 notification-tab-trigger"
            >
              <Bell className="h-4 w-4" />
              <span className="ml-1">ALL ALERTS</span>
            </TabsTrigger>
            <TabsTrigger
              value="unread"
              className="flex items-center justify-center gap-1 notification-tab-trigger"
            >
              <motion.div
                animate={{ scale: [1, 1.2, 1] }}
                transition={{ duration: 2, repeat: Infinity }}
              >
                <Badge variant="default" className="h-2 w-2 rounded-full p-0 notification-badge" />
              </motion.div>
              <span className="ml-1">NEW ALERTS</span>
            </TabsTrigger>
          </TabsList>

          <TabsContent value="all" className="space-y-6">
            {isLoading ? (
              <motion.div 
                className="text-center py-12"
                variants={itemVariants}
                animate={{ opacity: [0.5, 1, 0.5] }}
                transition={{ duration: 2, repeat: Infinity }}
              >
                <div className="loading-squares mb-4">
                  <div className="loading-square"></div>
                  <div className="loading-square"></div>
                  <div className="loading-square"></div>
                </div>
                <p className="text-purple-300">Loading notifications...</p>
              </motion.div>
            ) : notifications.length === 0 ? (
              <motion.div 
                className="notification-empty"
                variants={itemVariants}
              >
                <AlertCircle className="h-12 w-12 mx-auto mb-4 text-purple-400" />
                <h3 className="text-xl font-semibold mb-2 neon-text">No Notifications</h3>
                <p className="text-muted-foreground">You don't have any notifications yet.</p>
                <motion.div 
                  className="mt-6"
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                >
                  <Button 
                    className="gameboy-button"
                    onClick={() => setInviteDialogOpen(true)}
                  >
                    <Users className="mr-2 h-4 w-4" />
                    Invite Friends to Get Started
                  </Button>
                </motion.div>
              </motion.div>
            ) : (
              <AnimatePresence>
                {notificationGroups.map(([date, dateNotifications], groupIndex) => (
                  <motion.div 
                    key={date} 
                    className="space-y-2"
                    variants={itemVariants}
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: groupIndex * 0.1 }}
                  >
                    <h3 className="text-sm font-medium text-purple-400 mb-2 neon-text">
                      {date === new Date().toDateString() 
                        ? 'Today' 
                        : date === new Date(Date.now() - 86400000).toDateString() 
                          ? 'Yesterday' 
                          : date}
                    </h3>
                    <Card className="arcade-frame">
                      <CardContent className="p-0">
                        <ul className="divide-y divide-gray-800">
                          {dateNotifications.map((notification, index) => (
                            <motion.li 
                              key={notification.id}
                              className={`p-4 cursor-pointer hover:bg-gray-900/50 transition-colors ${!notification.read ? 'notification-card unread' : 'notification-card'}`}
                              onClick={() => handleNotificationClick(notification)}
                              whileHover={{ x: 5 }}
                              initial={{ opacity: 0, x: -20 }}
                              animate={{ opacity: 1, x: 0 }}
                              transition={{ delay: index * 0.05 }}
                            >
                              <div className="flex items-start gap-3">
                                <Avatar className="h-10 w-10 notification-avatar">
                                  {notification.actor?.avatar_url ? (
                                    <AvatarImage src={notification.actor.avatar_url} />
                                  ) : (
                                    <AvatarFallback className="bg-gradient-to-br from-purple-600 to-blue-600">
                                      {notification.actor?.username?.charAt(0).toUpperCase() || 'U'}
                                    </AvatarFallback>
                                  )}
                                </Avatar>
                                <div className="flex-1 min-w-0">
                                  <div className="flex items-center justify-between">
                                    <div className="flex items-center gap-2">
                                      <NotificationIcon type={notification.type} />
                                      <span className="font-medium text-white">
                                        {notification.actor?.username || 'Someone'}
                                      </span>
                                      <span className="text-xs text-purple-300">
                                        {formatDistanceToNow(new Date(notification.created_at), { addSuffix: true })}
                                      </span>
                                    </div>
                                    {!notification.read && (
                                      <motion.div
                                        animate={{ scale: [1, 1.2, 1] }}
                                        transition={{ duration: 2, repeat: Infinity }}
                                      >
                                        <Badge variant="default" className="bg-purple-500 h-2 w-2 rounded-full p-0" />
                                      </motion.div>
                                    )}
                                  </div>
                                  <p className="mt-1 text-sm text-gray-300">{notification.content}</p>
                                </div>
                              </div>
                            </motion.li>
                          ))}
                        </ul>
                      </CardContent>
                    </Card>
                  </motion.div>
                ))}
              </AnimatePresence>
            )}
          </TabsContent>

          <TabsContent value="unread" className="space-y-6">
            {isLoading ? (
              <motion.div 
                className="text-center py-12"
                variants={itemVariants}
                animate={{ opacity: [0.5, 1, 0.5] }}
                transition={{ duration: 2, repeat: Infinity }}
              >
                <div className="loading-squares mb-4">
                  <div className="loading-square"></div>
                  <div className="loading-square"></div>
                  <div className="loading-square"></div>
                </div>
                <p className="text-purple-300">Loading notifications...</p>
              </motion.div>
            ) : notifications.filter(n => !n.read).length === 0 ? (
              <motion.div 
                className="notification-empty"
                variants={itemVariants}
              >
                <Check className="h-12 w-12 mx-auto mb-4 text-green-400" />
                <h3 className="text-xl font-semibold mb-2 neon-text">All Caught Up!</h3>
                <p className="text-muted-foreground">You have no unread notifications.</p>
              </motion.div>
            ) : (
              <AnimatePresence>
                {notificationGroups.map(([date, dateNotifications]) => {
                  const unreadNotifications = dateNotifications.filter(n => !n.read);
                  if (unreadNotifications.length === 0) return null;
                  
                  return (
                    <motion.div 
                      key={date} 
                      className="space-y-2"
                      variants={itemVariants}
                    >
                      <h3 className="text-sm font-medium text-purple-400 mb-2 neon-text">
                        {date === new Date().toDateString() 
                          ? 'Today' 
                          : date === new Date(Date.now() - 86400000).toDateString() 
                            ? 'Yesterday' 
                            : date}
                      </h3>
                      <Card className="arcade-frame">
                        <CardContent className="p-0">
                          <ul className="divide-y divide-gray-800">
                            {unreadNotifications.map((notification, index) => (
                              <motion.li 
                                key={notification.id}
                                className="notification-card unread p-4 cursor-pointer hover:bg-gray-900/50 transition-colors"
                                onClick={() => handleNotificationClick(notification)}
                                whileHover={{ x: 5 }}
                                initial={{ opacity: 0, x: -20 }}
                                animate={{ opacity: 1, x: 0 }}
                                transition={{ delay: index * 0.05 }}
                              >
                                <div className="flex items-start gap-3">
                                  <Avatar className="h-10 w-10 notification-avatar">
                                    {notification.actor?.avatar_url ? (
                                      <AvatarImage src={notification.actor.avatar_url} />
                                    ) : (
                                      <AvatarFallback className="bg-gradient-to-br from-purple-600 to-blue-600">
                                        {notification.actor?.username?.charAt(0).toUpperCase() || 'U'}
                                      </AvatarFallback>
                                    )}
                                  </Avatar>
                                  <div className="flex-1 min-w-0">
                                    <div className="flex items-center justify-between">
                                      <div className="flex items-center gap-2">
                                        <NotificationIcon type={notification.type} />
                                        <span className="font-medium text-white">
                                          {notification.actor?.username || 'Someone'}
                                        </span>
                                        <span className="text-xs text-purple-300">
                                          {formatDistanceToNow(new Date(notification.created_at), { addSuffix: true })}
                                        </span>
                                      </div>
                                      <motion.div
                                        animate={{ scale: [1, 1.2, 1] }}
                                        transition={{ duration: 2, repeat: Infinity }}
                                      >
                                        <Badge variant="default" className="bg-purple-500 h-2 w-2 rounded-full p-0" />
                                      </motion.div>
                                    </div>
                                    <p className="mt-1 text-sm text-gray-300">{notification.content}</p>
                                  </div>
                                </div>
                              </motion.li>
                            ))}
                          </ul>
                        </CardContent>
                      </Card>
                    </motion.div>
                  );
                }).filter(Boolean)}
              </AnimatePresence>
            )}
          </TabsContent>
        </Tabs>
      </motion.div>

      {/* Invite Friends Dialog */}
      <InviteFriendsDialog 
        open={inviteDialogOpen} 
        onOpenChange={setInviteDialogOpen} 
      />
    </motion.div>
  );
};

export default NotificationsPage;
