import React, { useState, useEffect, useRef, useCallback, FC } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Search, ChevronLeft, ChevronRight, Heart, Share2, X, MessageCircle, DollarSign, Bell, Scissors, Star, Tv, Twitter, Facebook, Instagram, Copy, Link, Clock } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { debounce } from 'lodash';
import { useNavigate } from 'react-router-dom';
import RealtimeChat from '@/components/messages/RealtimeChat';
import { toast } from 'react-hot-toast';
import '../styles/discovery-retro.css';

// Define interfaces for our data types
interface Streamer {
  id: string;
  username: string;
  display_name: string;
  avatar_url: string;
  stream_url?: string; // For video source
  is_live: boolean;
  follower_count: number;
  bio?: string;
  game?: string;
  viewer_count?: number;
}

interface Game {
  id: string;
  name: string;
  cover_url: string;
  popularity?: number;
}

interface Clipt {
  id: string;
  title: string;
  video_url: string;
  thumbnail_url: string;
  user: {
    id: string;
    username: string;
    display_name: string;
    avatar_url: string;
  };

  game?: string;
  like_count: number;
  view_count: number;
  created_at: string;
}

const Discovery: FC = () => {
  const navigate = useNavigate();
  const swipeContainerRef = useRef<HTMLDivElement>(null);
  
  // Basic state management
  const [searchModalOpen, setSearchModalOpen] = useState(false);
  const [isSubscribed, setIsSubscribed] = useState(false);
  const [showShareOptions, setShowShareOptions] = useState(false);
  const [showSubOptions, setShowSubOptions] = useState(false);
  const [showDonateOptions, setShowDonateOptions] = useState(false);
  const [showCliptOptions, setShowCliptOptions] = useState(false);
  const [recordingTime, setRecordingTime] = useState<number>(60); // Default to 60 seconds (1 minute)
  const [donationAmount, setDonationAmount] = useState<string>('5.00');
  const [donationMessage, setDonationMessage] = useState<string>('');
  const [searchTerm, setSearchTerm] = useState('');
  const [searchLoading, setSearchLoading] = useState(false);
  
  // Content states
  const [streamers, setStreamers] = useState<Streamer[]>([]);
  const [games, setGames] = useState<Game[]>([]);
  const [clipts, setClipts] = useState<Clipt[]>([]);
  const [currentIndex, setCurrentIndex] = useState(0);
  
  // Mixed feed for game-specific content
  const [gameContent, setGameContent] = useState<(Streamer | Clipt)[]>([]);
  const [selectedGame, setSelectedGame] = useState<Game | null>(null);
  const [isGameView, setIsGameView] = useState(false);
  
  // Chat state
  const [showChat, setShowChat] = useState(false);
  const [chatPartnerId, setChatPartnerId] = useState('');

  // Search results
  const [searchResults, setSearchResults] = useState<{
    users: Streamer[];
    games: Game[];
  }>({ users: [], games: [] });

  // Handle search input change
  const handleSearchInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value || '';
    setSearchTerm(value);
  };

  // Debounced search function
  const debouncedSearch = useRef(
    debounce((term: string) => {
      if (term.length >= 2) {
        setSearchLoading(true);
        // Simulate search API call
        setTimeout(() => {
          const filteredGames = games.filter(game =>
            game.name.toLowerCase().includes(term.toLowerCase())
          );
          const filteredStreamers = streamers.filter(
            streamer =>
              streamer.display_name.toLowerCase().includes(term.toLowerCase()) ||
              (streamer.game && streamer.game.toLowerCase().includes(term.toLowerCase()))
          );
          
          setSearchResults({
            users: filteredStreamers,
            games: filteredGames
          });
          setSearchLoading(false);
        }, 500);
      }
    }, 300)
  ).current;

  // Handle game selection for dedicated game feed
  const handleGameSelect = (gameId: string, gameName: string) => {
    const selectedGame = games.find(g => g.id === gameId) || {
      id: gameId,
      name: gameName,
      cover_url: ''
    };

    setSelectedGame(selectedGame);
    
    // Create mixed content feed of streamers and clipts for this game
    const gameStreamers = streamers.filter(s => s.game?.toLowerCase() === gameName.toLowerCase());
    const gameClipts = clipts.filter(c => c.game?.toLowerCase() === gameName.toLowerCase());
    
    // Interleave streamers and clipts
    const mixedContent: (Streamer | Clipt)[] = [];
    const maxLength = Math.max(gameStreamers.length, gameClipts.length);
    
    for (let i = 0; i < maxLength; i++) {
      if (i < gameStreamers.length) mixedContent.push(gameStreamers[i]);
      if (i < gameClipts.length) mixedContent.push(gameClipts[i]);
    }
    
    setGameContent(mixedContent);
    setIsGameView(true);
    setSearchModalOpen(false);
    setCurrentIndex(0);
  };

  // Handle swipe gestures
  const handleSwipe = (direction: number) => {
    const contentArray = isGameView ? gameContent : streamers;
    if (contentArray.length === 0) return;
    
    let newIndex = currentIndex + direction;
    
    // Loop back to start/end when reaching the boundaries
    if (newIndex < 0) newIndex = contentArray.length - 1;
    if (newIndex >= contentArray.length) newIndex = 0;
    
    setCurrentIndex(newIndex);
  };

  const handleDragEnd = (event: MouseEvent | TouchEvent | PointerEvent, info: {offset: {x: number}}) => {
    if (Math.abs(info.offset.x) > 100) {
      if (info.offset.x > 0) {
        handleSwipe(-1); // Swipe right, previous item
      } else {
        handleSwipe(1); // Swipe left, next item
      }
    }
  };

  // Load sample data
  useEffect(() => {
    // Sample streamers with video URLs
    const sampleStreamers: Streamer[] = [
      {
        id: '1',
        username: 'progamer',
        display_name: 'ProGamer',
        avatar_url: 'https://picsum.photos/200/200?random=1',
        stream_url: 'https://assets.mixkit.co/videos/preview/mixkit-gaming-arcade-160.mp4',
        is_live: true,
        follower_count: 5300,
        viewer_count: 1200,
        game: 'Fortnite'
      },
      {
        id: '2',
        username: 'streamer2',
        display_name: 'Epic Gamer',
        avatar_url: 'https://picsum.photos/200/200?random=2',
        stream_url: 'https://assets.mixkit.co/videos/preview/mixkit-animation-of-futuristic-devices-99786.mp4',
        is_live: true,
        follower_count: 12800,
        viewer_count: 3500,
        game: 'Minecraft'
      },
      {
        id: '3',
        username: 'gamer3',
        display_name: 'GameMaster',
        avatar_url: 'https://picsum.photos/200/200?random=3',
        stream_url: 'https://assets.mixkit.co/videos/preview/mixkit-top-aerial-shot-of-seashore-with-rocks-1090.mp4',
        is_live: true,
        follower_count: 7600,
        viewer_count: 890,
        game: 'Call of Duty'
      },
      {
        id: '4',
        username: 'streamer4',
        display_name: 'LegendPlayer',
        avatar_url: 'https://picsum.photos/200/200?random=4',
        stream_url: 'https://assets.mixkit.co/videos/preview/mixkit-young-woman-playing-a-racing-video-game-143.mp4',
        is_live: true,
        follower_count: 9400,
        viewer_count: 2200,
        game: 'League of Legends'
      },
      {
        id: '5',
        username: 'gamer5',
        display_name: 'ProStreamer',
        avatar_url: 'https://picsum.photos/200/200?random=5',
        stream_url: 'https://assets.mixkit.co/videos/preview/mixkit-forest-stream-in-the-sunlight-529-large.mp4',
        is_live: true,
        follower_count: 15200,
        viewer_count: 4100,
        game: 'Valorant'
      },
      {
        id: '6',
        username: 'player6',
        display_name: 'TopPlayer',
        avatar_url: 'https://picsum.photos/200/200?random=6',
        stream_url: 'https://assets.mixkit.co/videos/preview/mixkit-man-playing-games-with-a-pad-controller-54-large.mp4',
        is_live: true,
        follower_count: 4800,
        viewer_count: 740,
        game: 'Among Us'
      }
    ];

    // Sample games
    const sampleGames: Game[] = [
      {
        id: 'game1',
        name: 'Fortnite',
        cover_url: 'https://picsum.photos/200/300?random=10',
        popularity: 95
      },
      {
        id: 'game2',
        name: 'Minecraft',
        cover_url: 'https://picsum.photos/200/300?random=11',
        popularity: 92
      },
      {
        id: 'game3',
        name: 'Call of Duty',
        cover_url: 'https://picsum.photos/200/300?random=12',
        popularity: 89
      },
      {
        id: 'game4',
        name: 'League of Legends',
        cover_url: 'https://picsum.photos/200/300?random=13',
        popularity: 87
      },
      {
        id: 'game5',
        name: 'Valorant',
        cover_url: 'https://picsum.photos/200/300?random=14',
        popularity: 85
      },
      {
        id: 'game6',
        name: 'Among Us',
        cover_url: 'https://picsum.photos/200/300?random=15',
        popularity: 80
      }
    ];
    
    // Sample clipts
    const sampleClipts: Clipt[] = [
      {
        id: 'clipt1',
        title: 'Amazing Fortnite Victory Royale!',
        video_url: 'https://assets.mixkit.co/videos/preview/mixkit-girl-playing-a-game-console-having-fun-4010.mp4',
        thumbnail_url: 'https://picsum.photos/200/300?random=20',
        user: {
          id: '1',
          username: 'progamer',
          display_name: 'ProGamer',
          avatar_url: 'https://picsum.photos/200/200?random=1',
        },
        game: 'Fortnite',
        like_count: 1250,
        view_count: 45000,
        created_at: '2025-04-10T14:30:00Z'
      },
      {
        id: 'clipt2',
        title: 'Minecraft Epic Build Complete!',
        video_url: 'https://assets.mixkit.co/videos/preview/mixkit-excited-young-man-playing-video-games-42420.mp4',
        thumbnail_url: 'https://picsum.photos/200/300?random=21',
        user: {
          id: '2',
          username: 'streamer2',
          display_name: 'Epic Gamer',
          avatar_url: 'https://picsum.photos/200/200?random=2',
        },
        game: 'Minecraft',
        like_count: 982,
        view_count: 32000,
        created_at: '2025-04-11T10:15:00Z'
      },
      {
        id: 'clipt3',
        title: 'Call of Duty Killstreak!',
        video_url: 'https://assets.mixkit.co/videos/preview/mixkit-hands-playing-a-game-with-a-console-1829.mp4',
        thumbnail_url: 'https://picsum.photos/200/300?random=22',
        user: {
          id: '3',
          username: 'gamer3',
          display_name: 'GameMaster',
          avatar_url: 'https://picsum.photos/200/200?random=3',
        },
        game: 'Call of Duty',
        like_count: 750,
        view_count: 28000,
        created_at: '2025-04-12T09:45:00Z'
      },
      {
        id: 'clipt4',
        title: 'League of Legends Pentakill!',
        video_url: 'https://assets.mixkit.co/videos/preview/mixkit-excited-woman-playing-a-video-game-on-tv-4008.mp4',
        thumbnail_url: 'https://picsum.photos/200/300?random=23',
        user: {
          id: '4',
          username: 'streamer4',
          display_name: 'LegendPlayer',
          avatar_url: 'https://picsum.photos/200/200?random=4',
        },
        game: 'League of Legends',
        like_count: 1050,
        view_count: 38000,
        created_at: '2025-04-09T18:20:00Z'
      },
      {
        id: 'clipt5',
        title: 'Valorant Ace Clutch!',
        video_url: 'https://assets.mixkit.co/videos/preview/mixkit-gamer-playing-on-a-tv-4026.mp4',
        thumbnail_url: 'https://picsum.photos/200/300?random=24',
        user: {
          id: '5',
          username: 'gamer5',
          display_name: 'ProStreamer',
          avatar_url: 'https://picsum.photos/200/200?random=5',
        },
        game: 'Valorant',
        like_count: 890,
        view_count: 31000,
        created_at: '2025-04-08T21:10:00Z'
      },
      {
        id: 'clipt6',
        title: 'Among Us Perfect Imposter Play!',
        video_url: 'https://assets.mixkit.co/videos/preview/mixkit-young-man-playing-a-racing-video-game-144.mp4',
        thumbnail_url: 'https://picsum.photos/200/300?random=25',
        user: {
          id: '6',
          username: 'player6',
          display_name: 'TopPlayer',
          avatar_url: 'https://picsum.photos/200/200?random=6',
        },
        game: 'Among Us',
        like_count: 620,
        view_count: 22000,
        created_at: '2025-04-07T15:35:00Z'
      }
    ];

    setStreamers(sampleStreamers);
    setGames(sampleGames);
    setClipts(sampleClipts);

    // Simulate search results
    setSearchResults({
      users: sampleStreamers.slice(0, 3),
      games: sampleGames.slice(0, 3)
    });

  }, []);

  // Effect to trigger search
  useEffect(() => {
    if (searchTerm.length >= 2) {
      debouncedSearch(searchTerm);
    }
  }, [searchTerm, debouncedSearch]);
  
  // Handle recording a clipt
  const handleRecordClipt = () => {
    // Get the current streamer or content info for the toast message
    let contentName = '';
    if (isGameView) {
      if (gameContent.length > 0 && currentIndex < gameContent.length) {
        contentName = 'stream_url' in gameContent[currentIndex] 
          ? (gameContent[currentIndex] as Streamer).display_name
          : (gameContent[currentIndex] as Clipt).user.display_name;
      }
    } else if (streamers.length > 0 && currentIndex < streamers.length) {
      contentName = streamers[currentIndex].display_name;
    }
    
    // Close clipt options and show recording toast
    setShowCliptOptions(false);
    toast.success(`Recording ${recordingTime}s clipt from ${contentName || 'stream'}`);
    
    // Simulate successful recording after a delay
    setTimeout(() => {
      toast.success(`Clipt saved! Added to your library.`);
    }, 2000);
  };
  
  // Handle keyboard navigation
  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === 'ArrowLeft') {
        handleSwipe(-1);
      } else if (e.key === 'ArrowRight') {
        handleSwipe(1);
      } else if (e.key === 'Escape') {
        setSearchModalOpen(false);
        setShowChat(false);
        setShowCliptOptions(false);
        setShowSubOptions(false);
        setShowShareOptions(false);
        setShowDonateOptions(false);
      }
    };
    
    window.addEventListener('keydown', handleKeyDown);
    return () => window.removeEventListener('keydown', handleKeyDown);
  }, [currentIndex, isGameView]);

  return (
    <div className="discovery-container">
      {/* Very visible search icon */}
      <div
        style={{
          position: 'absolute',
          top: '20px',
          right: '20px',
          zIndex: 9999,
          width: '50px',
          height: '50px',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          background: 'rgba(0, 0, 0, 0.7)',
          borderRadius: '50%',
          cursor: 'pointer',
          border: '2px solid #ff8c00',
          boxShadow: '0 0 10px rgba(255, 140, 0, 0.6)'
        }}
        onClick={() => setSearchModalOpen(true)}
      >
        <Search size={28} color="#ff8c00" strokeWidth={2.5} />
      </div>
      
      {/* TV button for Live page navigation */}
      <div
        style={{
          position: 'absolute',
          top: '20px',
          right: '90px',
          zIndex: 9999,
          width: '50px',
          height: '50px',
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'center',
          background: 'rgba(0, 0, 0, 0.7)',
          borderRadius: '50%',
          cursor: 'pointer',
          border: '2px solid #ff8c00',
          boxShadow: '0 0 10px rgba(255, 140, 0, 0.6)'
        }}
        onClick={() => navigate('/live')}
      >
        <Tv size={28} color="#ff8c00" strokeWidth={2.5} />
      </div>

      {/* Full Screen Video Display */}
      <div className="disco video-container">
        {isGameView ? (
          // Game-specific content (clipts and streams)
          gameContent.length > 0 && currentIndex < gameContent.length ? (
            'stream_url' in gameContent[currentIndex] ? (
              // It's a streamer
              <video 
                src={(gameContent[currentIndex] as Streamer).stream_url} 
                autoPlay 
                loop 
                muted 
                playsInline
                className="stream-video"
              />
            ) : (
              // It's a clipt
              <video 
                src={(gameContent[currentIndex] as Clipt).video_url} 
                autoPlay 
                loop 
                muted 
                playsInline
                className="stream-video"
              />
            )
          ) : (
            <div className="empty-content">
              <p>No content found for {selectedGame?.name}</p>
            </div>
          )
        ) : (
          // General discovery feed (streamers only for now)
          streamers.length > 0 && currentIndex < streamers.length ? (
            <video 
              src={streamers[currentIndex].stream_url} 
              autoPlay 
              loop 
              muted 
              playsInline
              className="stream-video"
            />
          ) : (
            <div className="empty-content">
              <p>No streams available</p>
            </div>
          )
        )}
      
      
        
        {/* Streamer Profile Info at top */}
        {streamers.length > 0 && currentIndex < streamers.length && !isGameView && (
          <div className="streamer-top-info">
            <div className="streamer-profile-top">
              <img 
                src={streamers[currentIndex].avatar_url} 
                alt={streamers[currentIndex].display_name}
                className="streamer-avatar"
              />
              <div className="streamer-details">
                <h3>{streamers[currentIndex].display_name}</h3>
                {streamers[currentIndex].game && (
                  <p>{streamers[currentIndex].game}</p>
                )}
      
      
                <div className="viewer-count">
                  {streamers[currentIndex].viewer_count?.toLocaleString()} viewers
                </div>
              </div>
            </div>
          </div>
        )}
      
      

        {/* Game Content Info at top */}
        {gameContent.length > 0 && currentIndex < gameContent.length && isGameView && (
          <div className="streamer-top-info">
            <div className="streamer-profile-top">
              {'avatar_url' in gameContent[currentIndex] ? (
                // It's a streamer
                <>
                  <img 
                    src={(gameContent[currentIndex] as Streamer).avatar_url} 
                    alt={(gameContent[currentIndex] as Streamer).display_name}
                    className="streamer-avatar"
                  />
                  <div className="streamer-details">
                    <h3>{(gameContent[currentIndex] as Streamer).display_name}</h3>
                    {(gameContent[currentIndex] as Streamer).game && (
                      <p>{(gameContent[currentIndex] as Streamer).game}</p>
                    )}
      
      
                    <div className="viewer-count">
                      {(gameContent[currentIndex] as Streamer).viewer_count?.toLocaleString()} viewers
                    </div>
                  </div>
                </>
              ) : (
                // It's a clipt
                <>
                  <img 
                    src={(gameContent[currentIndex] as Clipt).user.avatar_url} 
                    alt={(gameContent[currentIndex] as Clipt).user.display_name}
                    className="streamer-avatar"
                  />
                  <div className="streamer-details">
                    <h3>{(gameContent[currentIndex] as Clipt).user.display_name}</h3>
                    <p>{(gameContent[currentIndex] as Clipt).title}</p>
                    <div className="viewer-count">
                      {(gameContent[currentIndex] as Clipt).view_count.toLocaleString()} views
                    </div>
                  </div>
                </>
              )}
      
      
            </div>
          </div>
        )}
      
      
        
        {/* Navigation Buttons - Left/Right arrows */}
        <button 
          className="nav-button prev"
          onClick={() => handleSwipe(-1)}
          aria-label="Previous content"
        >
          <ChevronLeft />
        </button>
        
        <button 
          className="nav-button next"
          onClick={() => handleSwipe(1)}
          aria-label="Next content"
        >
          <ChevronRight />
        </button>
      </div>

      {/* Action Buttons - Fixed at the bottom of the screen, styled like StreamView buttons */}
      <div className="mt-4 flex justify-center gap-3 mb-6 flex-wrap" style={{ position: 'fixed', bottom: '20px', left: '0', right: '0', zIndex: 999, padding: '10px', background: 'rgba(0,0,0,0.7)' }}>
        <Button 
          className="bg-orange-500/20 border-orange-500/30 text-orange-500 hover:bg-orange-500/30 flex items-center gap-1"
          onClick={() => {
            const contentArray = isGameView ? gameContent : streamers;
            const currentItem = contentArray[currentIndex];
            let id;
            if (isGameView && 'user' in currentItem) {
              id = (currentItem as Clipt).user.id;
            } else if ('id' in currentItem) {
              id = currentItem.id;
            } else {
              id = streamers[0]?.id || '';
            }
            setChatPartnerId(id);
            setShowChat(true);
          }}
          variant="outline"
          size="sm"
        >
          <MessageCircle className="h-4 w-4" />
          Chat
        </Button>
        
        <Button 
          className="bg-orange-500/20 border-orange-500/30 text-orange-500 hover:bg-orange-500/30 flex items-center gap-1"
          onClick={() => setShowCliptOptions(true)}
          variant="outline"
          size="sm"
        >
          <Scissors className="h-4 w-4" />
          Clipt
        </Button>
        
        <Button 
          className="bg-orange-500/20 border-orange-500/30 text-orange-500 hover:bg-orange-500/30 flex items-center gap-1"
          onClick={() => setShowDonateOptions(true)}
          variant="outline"
          size="sm"
        >
          <DollarSign className="h-4 w-4" />
          Donate
        </Button>
        
        <Button 
          className={`bg-orange-500/20 border-orange-500/30 text-orange-500 hover:bg-orange-500/30 flex items-center gap-1 ${isSubscribed ? 'border-2 border-orange-500' : ''}`}
          onClick={() => setShowSubOptions(true)}
          variant="outline"
          size="sm"
        >
          <Bell className="h-4 w-4" />
          Sub
        </Button>
        
        <Button 
          className="bg-orange-500/20 border-orange-500/30 text-orange-500 hover:bg-orange-500/30 flex items-center gap-1"
          onClick={() => setShowShareOptions(true)}
          variant="outline"
          size="sm"
        >
          <Share2 className="h-4 w-4" />
          Share
        </Button>

        {/* TV Icon Button leading to Clipts live page for streamers and categories */}
        <Button 
          className="bg-orange-500/20 border-orange-500/30 text-orange-500 hover:bg-orange-500/30 flex items-center gap-1"
          onClick={() => navigate('/live')}
          variant="outline"
          size="sm"
        >
          <Tv className="h-4 w-4" />
          Live TV
        </Button>
      </div>
      
      {/* Search Modal */}
      {searchModalOpen && (
        <div className="search-modal">
          <div className="search-modal-header">
            <button onClick={() => setSearchModalOpen(false)}>
              <ChevronLeft />
            </button>
            <div className="search-input-wrapper">
              <Search />
              <input
                type="text"
                placeholder="Search games and streamers"
                value={searchTerm}
                onChange={handleSearchInputChange}
                autoFocus
              />
              {searchTerm && (
                <button onClick={() => setSearchTerm('')}>
                  <X />
                </button>
              )}
      
      
            </div>
          </div>
          
          <div className="search-results">
            {searchLoading ? (
              <div className="search-loading">Loading...</div>
            ) : (
              <>
                {searchResults.games.length > 0 && (
                  <div className="result-section">
                    <h3>Games</h3>
                    <div className="game-results">
                      {searchResults.games.map(game => (
                        <div 
                          key={game.id} 
                          className="game-result-item"
                          onClick={() => handleGameSelect(game.id, game.name)}
                        >
                          <img src={game.cover_url} alt={game.name} />
                          <span>{game.name}</span>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
      
      
                
                {searchResults.users.length > 0 && (
                  <div className="result-section">
                    <h3>Streamers</h3>
                    <div className="streamer-results">
                      {searchResults.users.map(streamer => (
                        <div 
                          key={streamer.id} 
                          className="streamer-result-item"
                          onClick={() => {
                            setChatPartnerId(streamer.id);
                            setShowChat(true);
                            setSearchModalOpen(false);
                          }}
                        >
                          <img src={streamer.avatar_url} alt={streamer.display_name} />
                          <div>
                            <span className="streamer-name">{streamer.display_name}</span>
                            {streamer.game && <span className="streamer-game">{streamer.game}</span>}
                          </div>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
      
      
              </>
            )}
      
      
          </div>
        </div>
      )}
      
      
      
      {/* Chat Panel - Bottom Overlay with improved styling */}
      {showChat && (
        <div className="chat-panel bottom-panel">
          <div className="panel-header chat-header">
            <div className="panel-title">
              <h3>Live Chat</h3>
              <div className="chat-info">
                {streamers.find((s) => s.id === chatPartnerId) && (
                  <div className="streamer-chat-info">
                    <img 
                      src={streamers.find((s) => s.id === chatPartnerId)?.avatar_url || streamers[0]?.avatar_url || ''} 
                      alt="Streamer"
                      className="chat-avatar"
                    />
                    <span className="chat-username">
                      {streamers.find((s) => s.id === chatPartnerId)?.display_name || streamers[0]?.display_name || 'Streamer'}
                    </span>
                  </div>
                )}
      
      
              </div>
            </div>
            <button className="close-panel" onClick={() => setShowChat(false)}>
              <X />
            </button>
          </div>
          
          <div className="panel-content chat-content">
            <RealtimeChat
              partnerId={chatPartnerId || streamers[0]?.id || ''}
              partnerInfo={{
                id: chatPartnerId || streamers[0]?.id || '',
                username: streamers.find((s) => s.id === chatPartnerId)?.username || streamers[0]?.username || '',
                displayName: streamers.find((s) => s.id === chatPartnerId)?.display_name || streamers[0]?.display_name || '',
                avatarUrl: streamers.find((s) => s.id === chatPartnerId)?.avatar_url || streamers[0]?.avatar_url || '',
              }}
              onClose={() => setShowChat(false)}
            />
          </div>
        </div>
      )}
      
      
      
      {/* Subscription Options Panel with Payment */}
      {showSubOptions && (
        <div className="sub-options-panel modal-panel">
          <div className="panel-header">
            <div className="panel-title">
              <h3>Subscribe to {streamers[currentIndex]?.display_name || 'Streamer'}</h3>
            </div>
            <button className="close-panel" onClick={() => setShowSubOptions(false)}>
              <X />
            </button>
          </div>
          
          <div className="panel-content sub-options">
            <div className="subscription-description">
              <p>Choose a subscription tier and support your favorite creator. Subscriptions renew automatically each month.</p>
            </div>
            
            <div className="tier-container">
              <div className="sub-tier tier-card">
                <div className="tier-header">
                  <h4>Tier 1</h4>
                  <span className="price">$4.99/month</span>
                </div>
                <ul className="benefits">
                  <li>Ad-free viewing</li>
                  <li>Custom emotes</li>
                  <li>Subscriber badge</li>
                </ul>
                <div className="payment-method">
                  <div className="payment-title">Payment Method</div>
                  <div className="payment-options">
                    <label className="payment-option">
                      <input type="radio" name="payment-tier1" value="credit" defaultChecked />
                      <span>Credit Card</span>
                    </label>
                    <label className="payment-option">
                      <input type="radio" name="payment-tier1" value="paypal" />
                      <span>PayPal</span>
                    </label>
                  </div>
                  <button 
                    className="select-tier-btn"
                    onClick={() => {
                      setIsSubscribed(true);
                      setShowSubOptions(false);
                      alert('Thank you for subscribing at Tier 1!');
                    }}
                  >
                    Subscribe for $4.99/month
                  </button>
                </div>
              </div>
              
              <div className="sub-tier tier-card popular">
                <div className="popular-badge">MOST POPULAR</div>
                <div className="tier-header">
                  <h4>Tier 2</h4>
                  <span className="price">$9.99/month</span>
                </div>
                <ul className="benefits">
                  <li>All Tier 1 benefits</li>
                  <li>Exclusive content</li>
                  <li>Priority chat</li>
                </ul>
                <div className="payment-method">
                  <div className="payment-title">Payment Method</div>
                  <div className="payment-options">
                    <label className="payment-option">
                      <input type="radio" name="payment-tier2" value="credit" defaultChecked />
                      <span>Credit Card</span>
                    </label>
                    <label className="payment-option">
                      <input type="radio" name="payment-tier2" value="paypal" />
                      <span>PayPal</span>
                    </label>
                  </div>
                  <button 
                    className="select-tier-btn"
                    onClick={() => {
                      setIsSubscribed(true);
                      setShowSubOptions(false);
                      alert('Thank you for subscribing at Tier 2!');
                    }}
                  >
                    Subscribe for $9.99/month
                  </button>
                </div>
              </div>
              
              <div className="sub-tier tier-card">
                <div className="tier-header">
                  <h4>Tier 3</h4>
                  <span className="price">$24.99/month</span>
                </div>
                <ul className="benefits">
                  <li>All Tier 2 benefits</li>
                  <li>Monthly one-on-one call</li>
                  <li>Exclusive merchandise</li>
                </ul>
                <div className="payment-method">
                  <div className="payment-title">Payment Method</div>
                  <div className="payment-options">
                    <label className="payment-option">
                      <input type="radio" name="payment-tier3" value="credit" defaultChecked />
                      <span>Credit Card</span>
                    </label>
                    <label className="payment-option">
                      <input type="radio" name="payment-tier3" value="paypal" />
                      <span>PayPal</span>
                    </label>
                  </div>
                  <button 
                    className="select-tier-btn"
                    onClick={() => {
                      setIsSubscribed(true);
                      setShowSubOptions(false);
                      alert('Thank you for subscribing at Tier 3!');
                    }}
                  >
                    Subscribe for $24.99/month
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
      
      
      
      {/* Advanced Share Modal - styled like StreamView */}
      {showShareOptions && (
        <div className="fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4">
          <div className="bg-black border-2 border-orange-500/50 rounded-xl w-full max-w-md overflow-hidden">
            <div className="p-4 border-b border-orange-500/30 flex justify-between items-center">
              <h3 className="text-xl font-bold text-orange-500">Share Content</h3>
              <Button 
                variant="ghost" 
                size="sm" 
                className="text-white hover:bg-orange-500/10 rounded-full p-1 h-8 w-8"
                onClick={() => setShowShareOptions(false)}
              >
                <X className="h-5 w-5" />
              </Button>
            </div>
            
            <div className="p-4 space-y-4">
              <div className="text-white text-sm">
                <p>Share this {isGameView ? 'game content' : 'streamer'} with your friends</p>
              </div>
              
              <div className="grid grid-cols-4 gap-2 mt-4">
                <button 
                  className="flex flex-col items-center gap-1 p-2 hover:bg-orange-500/10 rounded-lg transition-colors"
                  onClick={() => {
                    const contentName = isGameView ? 
                      ('name' in gameContent[currentIndex] ? (gameContent[currentIndex] as Game).name : 'content') : 
                      streamers[currentIndex]?.display_name || 'content';
                    const text = `Check out ${contentName} on Clipt!`;
                    window.open(`https://twitter.com/intent/tweet?text=${encodeURIComponent(text)}&url=${encodeURIComponent(window.location.href)}`, '_blank');
                    setShowShareOptions(false);
                  }}
                >
                  <div className="w-8 h-8 rounded-full bg-blue-400 flex items-center justify-center text-white">
                    <Twitter className="h-4 w-4" />
                  </div>
                  <span className="text-xs text-white">Twitter</span>
                </button>
                
                <button 
                  className="flex flex-col items-center gap-1 p-2 hover:bg-orange-500/10 rounded-lg transition-colors"
                  onClick={() => {
                    window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(window.location.href)}`, '_blank');
                    setShowShareOptions(false);
                  }}
                >
                  <div className="w-8 h-8 rounded-full bg-blue-600 flex items-center justify-center text-white">
                    <Facebook className="h-4 w-4" />
                  </div>
                  <span className="text-xs text-white">Facebook</span>
                </button>
                
                <button 
                  className="flex flex-col items-center gap-1 p-2 hover:bg-orange-500/10 rounded-lg transition-colors"
                  onClick={() => {
                    window.open(`https://www.reddit.com/submit?url=${encodeURIComponent(window.location.href)}`, '_blank');
                    setShowShareOptions(false);
                  }}
                >
                  <div className="w-8 h-8 rounded-full bg-orange-600 flex items-center justify-center text-white">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><circle cx="12" cy="12" r="10"/><path d="M16 12a4 4 0 0 0-8 0"/><path d="M9 8a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"/><path d="M15 8a1 1 0 1 0 0-2 1 1 0 0 0 0 2z"/><path d="M9 12s1-1 3-1 3 1 3 1"/></svg>
                  </div>
                  <span className="text-xs text-white">Reddit</span>
                </button>
                
                <button 
                  className="flex flex-col items-center gap-1 p-2 hover:bg-orange-500/10 rounded-lg transition-colors"
                  onClick={() => {
                    // Discord doesn't have a direct share URL, we'll copy to clipboard instead
                    const contentName = isGameView ? 
                      ('name' in gameContent[currentIndex] ? (gameContent[currentIndex] as Game).name : 'content') : 
                      streamers[currentIndex]?.display_name || 'content';
                    const text = `Check out ${contentName} on Clipt! ${window.location.href}`;
                    navigator.clipboard.writeText(text);
                    toast.success('Link copied for Discord!');
                    setShowShareOptions(false);
                  }}
                >
                  <div className="w-8 h-8 rounded-full bg-indigo-600 flex items-center justify-center text-white">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M9 17a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V9a2 2 0 0 1 2-2h3a2 2 0 0 1 2 2v.088M16 17a2 2 0 0 0 2 2h3a2 2 0 0 0 2-2v-8a2 2 0 0 0-2-2h-3a2 2 0 0 0-2 2v.088"/><path d="M12 17V9" /><path d="M22 12H2" /></svg>
                  </div>
                  <span className="text-xs text-white">Discord</span>
                </button>
                
                <button 
                  className="flex flex-col items-center gap-1 p-2 hover:bg-orange-500/10 rounded-lg transition-colors"
                  onClick={() => {
                    // SMS share
                    const contentName = isGameView ? 
                      ('name' in gameContent[currentIndex] ? (gameContent[currentIndex] as Game).name : 'content') : 
                      streamers[currentIndex]?.display_name || 'content';
                    const text = `Check out ${contentName} on Clipt! ${window.location.href}`;
                    window.open(`sms:?body=${encodeURIComponent(text)}`, '_blank');
                    setShowShareOptions(false);
                  }}
                >
                  <div className="w-8 h-8 rounded-full bg-green-500 flex items-center justify-center text-white">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><path d="M21 15a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2"/><path d="M21 11V5a2 2 0 0 0-2-2H5a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h4"/><line x1="7" y1="19" x2="11" y2="19"/></svg>
                  </div>
                  <span className="text-xs text-white">Text</span>
                </button>
                
                <button 
                  className="flex flex-col items-center gap-1 p-2 hover:bg-orange-500/10 rounded-lg transition-colors"
                  onClick={() => {
                    // Copy link to clipboard
                    navigator.clipboard.writeText(window.location.href);
                    toast.success('Link copied to clipboard!');
                  }}
                >
                  <div className="w-8 h-8 rounded-full bg-gray-600 flex items-center justify-center text-white">
                    <Copy className="h-4 w-4" />
                  </div>
                  <span className="text-xs text-white">Copy Link</span>
                </button>

                <button 
                  className="flex flex-col items-center gap-1 p-2 hover:bg-orange-500/10 rounded-lg transition-colors"
                  onClick={() => {
                    // Email share
                    const contentName = isGameView ? 
                      ('name' in gameContent[currentIndex] ? (gameContent[currentIndex] as Game).name : 'content') : 
                      streamers[currentIndex]?.display_name || 'content';
                    const subject = `Check out ${contentName} on Clipt!`;
                    const body = `I found this amazing content on Clipt that I wanted to share with you: ${window.location.href}`;
                    window.open(`mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`, '_blank');
                    setShowShareOptions(false);
                  }}
                >
                  <div className="w-8 h-8 rounded-full bg-purple-600 flex items-center justify-center text-white">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"><rect width="20" height="16" x="2" y="4" rx="2"/><path d="m22 7-8.97 5.7a1.94 1.94 0 0 1-2.06 0L2 7"/></svg>
                  </div>
                  <span className="text-xs text-white">Email</span>
                </button>
              </div>
              
              <div className="mt-4 flex justify-center">
                <Button 
                  variant="ghost" 
                  size="sm"
                  className="text-white hover:bg-orange-500/10"
                  onClick={() => setShowShareOptions(false)}
                >
                  Cancel
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}

            </div>
          </div>
        </div>
      )}
      
      
      
      {/* Clipt Recording Options Panel */}
      {showCliptOptions && (
        <div className="clipt-options-panel modal-panel">
          <div className="panel-header">
            <div className="panel-title">
              <h3>Create a Clipt</h3>
            </div>
            <button className="close-panel" onClick={() => setShowCliptOptions(false)}>
              <X />
            </button>
          </div>
          
          <div className="panel-content clipt-options">
            <div className="clipt-description">
              <p>Record the last moments of the stream to share with others. Choose your clip length:</p>
            </div>
            
            <div className="clipt-timing-options">
              <button 
                className={`clipt-timing-option ${recordingTime === 15 ? 'selected' : ''}`}
                onClick={() => setRecordingTime(15)}
              >
                <Clock className="timer-icon" />
                <span>15s</span>
              </button>
              
              <button 
                className={`clipt-timing-option ${recordingTime === 30 ? 'selected' : ''}`}
                onClick={() => setRecordingTime(30)}
              >
                <Clock className="timer-icon" />
                <span>30s</span>
              </button>
              
              <button 
                className={`clipt-timing-option ${recordingTime === 60 ? 'selected' : ''}`}
                onClick={() => setRecordingTime(60)}
              >
                <Clock className="timer-icon" />
                <span>60s</span>
              </button>
              
              <button 
                className={`clipt-timing-option ${recordingTime === 120 ? 'selected' : ''}`}
                onClick={() => setRecordingTime(120)}
              >
                <Clock className="timer-icon" />
                <span>2min</span>
              </button>
            </div>
            
            <div className="clipt-options-footer">
              <button 
                className="record-clipt-btn"
                onClick={() => handleRecordClipt()}
              >
                <Scissors className="scissors-icon" />
                <span>Record Last {recordingTime}s</span>
              </button>
            </div>
          </div>
        </div>
      )}
      
      {/* Donation Panel */}
      {showDonateOptions && (
        <div className="donate-panel modal-panel">
          <div className="panel-header">
            <div className="panel-title">
              <h3>Support {streamers[currentIndex]?.display_name || 'Streamer'}</h3>
            </div>
            <button className="close-panel" onClick={() => setShowDonateOptions(false)}>
              <X />
            </button>
          </div>
          
          <div className="panel-content donate-content">
            <div className="donate-description">
              <p>Your donation directly supports the creator and helps them continue making great content.</p>
            </div>
            
            <div className="donation-form">
              <div className="amount-section">
                <h4>Donation Amount</h4>
                <div className="amount-options">
                  <button 
                    className={`amount-option ${donationAmount === '5.00' ? 'selected' : ''}`}
                    onClick={() => setDonationAmount('5.00')}
                  >
                    $5
                  </button>
                  <button 
                    className={`amount-option ${donationAmount === '10.00' ? 'selected' : ''}`}
                    onClick={() => setDonationAmount('10.00')}
                  >
                    $10
                  </button>
                  <button 
                    className={`amount-option ${donationAmount === '20.00' ? 'selected' : ''}`}
                    onClick={() => setDonationAmount('20.00')}
                  >
                    $20
                  </button>
                  <button 
                    className={`amount-option ${donationAmount === '50.00' ? 'selected' : ''}`}
                    onClick={() => setDonationAmount('50.00')}
                  >
                    $50
                  </button>
                  <button 
                    className={`amount-option ${!['5.00', '10.00', '20.00', '50.00'].includes(donationAmount) ? 'selected' : ''}`}
                    onClick={() => setDonationAmount('')}
                  >
                    Custom
                  </button>
                </div>
                
                {!['5.00', '10.00', '20.00', '50.00'].includes(donationAmount) && (
                  <div className="custom-amount">
                    <span className="currency-symbol">$</span>
                    <input 
                      type="number" 
                      className="amount-input"
                      value={donationAmount}
                      onChange={(e) => setDonationAmount(e.target.value)}
                      min="1"
                      step="0.01"
                      placeholder="Enter amount"
                    />
                  </div>
                )}
      
      
              </div>
              
              <div className="message-section">
                <h4>Add a Message (Optional)</h4>
                <textarea 
                  className="donation-message" 
                  placeholder="Add a message that will appear with your donation..."
                  value={donationMessage}
                  onChange={(e) => setDonationMessage(e.target.value)}
                  rows={3}
                />
              </div>
              
              <div className="payment-section">
                <h4>Payment Method</h4>
                <div className="payment-options">
                  <label className="payment-option">
                    <input type="radio" name="payment-donate" value="credit" defaultChecked />
                    <span>Credit Card</span>
                  </label>
                  <label className="payment-option">
                    <input type="radio" name="payment-donate" value="paypal" />
                    <span>PayPal</span>
                  </label>
                </div>
              </div>
              
              <button 
                className="donate-button submit-btn"
                onClick={() => {
                  alert(`Thank you for your $${donationAmount} donation!`);
                  setShowDonateOptions(false);
                }}
              >
                Donate ${donationAmount || '0.00'}
              </button>
            </div>
          </div>
        </div>
      )}
      
      
    </div>
  );
};

export default Discovery;
