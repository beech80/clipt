import React, { useState, useEffect } from 'react';
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
  CardDescription,
  CardFooter,
} from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Copy, Eye, EyeOff, Server, Check, Video, BarChart, Share2, Shield, Zap, Settings, ChevronLeft, AlertTriangle, Users, Tv, Cpu, Activity } from "lucide-react";
import { toast } from "sonner";
import { useAuth } from "@/contexts/AuthContext";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Separator } from "@/components/ui/separator";
import { motion } from 'framer-motion';
import '@/styles/advanced-streaming.css';
import { useNavigate } from 'react-router-dom';

export default function StreamSetup() {
  const { user } = useAuth();
  const navigate = useNavigate();
  const [showKey, setShowKey] = useState(false);
  const [activeTab, setActiveTab] = useState("setup");
  const [streamActive, setStreamActive] = useState(false);
  const [connectionStatus, setConnectionStatus] = useState("good"); // good, warning, critical
  const [cdnNodes, setCdnNodes] = useState(12); // Number of active CDN nodes
  const [serverLoad, setServerLoad] = useState(32); // Percentage
  const [viewerCount, setViewerCount] = useState(0);
  const [streamUptime, setStreamUptime] = useState(0); // in seconds
  
  // In production, these would be fetched from the backend
  const RTMP_URL = "rtmp://live.clipt.cc/live";
  const STREAM_KEY = user?.id ? `live_${user.id.substring(0, 8)}` : "live_5f9b3a2e1d8c7b6a5f4e3d2c1b0a9f8e7d6c5b4a";
  
  // Simulate checking stream status and update metrics
  useEffect(() => {
    const interval = setInterval(() => {
      // Update server metrics
      const newLoad = Math.floor(Math.random() * 40) + 20; // 20-60% load
      setServerLoad(newLoad);
      
      if (streamActive) {
        // Increment uptime when stream is active
        setStreamUptime(prev => prev + 10);
        // Randomly adjust viewer count when streaming
        setViewerCount(prev => {
          const change = Math.floor(Math.random() * 5) - 2; // -2 to +2
          return Math.max(0, prev + change);
        });
      }
      
      // Randomly toggle stream active state for demo with 10% probability
      if (Math.random() > 0.9) {
        setStreamActive(prev => !prev);
        if (!streamActive) {
          // Reset stream uptime when starting a new stream
          setStreamUptime(0);
          // Start with a base number of viewers
          setViewerCount(Math.floor(Math.random() * 10));
        }
      }
    }, 10000);

    return () => clearInterval(interval);
  }, [streamActive]);

  // Copy to clipboard function
  const copyToClipboard = async (text: string, type: string) => {
    try {
      await navigator.clipboard.writeText(text);
      toast("Copied!", {
        description: `${type} copied to clipboard.`,
        duration: 2000,
      });
    } catch (err) {
      console.error("Failed to copy:", err);
      toast.error("Copy Failed", {
        description: "Please try again or copy manually."
      });
    }
  };

  // Format stream uptime
  const formatUptime = (seconds: number) => {
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    const secs = seconds % 60;
    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
  };
  
  // Navigate back to the main streaming page
  const goBack = () => {
    navigate('/streaming');
  };

  return (
    <div style={{
      backgroundColor: '#1a1a2e',
      minHeight: '100vh',
      color: 'white',
      backgroundImage: 'linear-gradient(to bottom, #1a1a2e, #0d0d1a)'
    }}>
      {/* Header with navigation */}
      <div style={{
        background: 'linear-gradient(to right, rgba(138, 43, 226, 0.8), rgba(25, 25, 112, 0.4))',
        padding: '15px 20px',
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)'
      }}>
        <div className="flex items-center">
          <Button
            variant="ghost"
            size="icon"
            onClick={goBack}
            className="mr-2"
            style={{ color: 'white' }}
          >
            <ChevronLeft className="h-5 w-5" />
          </Button>
          <h1 className="text-xl font-bold">Stream Setup</h1>
        </div>
        
        <div className="health-indicator flex items-center">
          {streamActive ? (
            <div className="flex items-center">
              <div className="pulse-dot mr-2"></div>
              <span className="text-sm font-medium">Live</span>
            </div>
          ) : (
            <div className="flex items-center">
              <div className="inactive-dot mr-2"></div>
              <span className="text-sm font-medium">Offline</span>
            </div>
          )}
        </div>
      </div>
      
      {/* Main content */}
      <div className="container p-6 max-w-4xl mx-auto">
        {/* Header section with stream info */}
        <motion.div 
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.5 }}
          className="stream-header mb-8"
        >
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6">
            <div>
              <h2 className="text-2xl font-bold" style={{ color: '#8a2be2' }}>Streaming Dashboard</h2>
              <p className="text-gray-400">Configure your stream and monitor its health</p>
            </div>
            
            <div className="stream-status mt-4 sm:mt-0">
              {streamActive ? (
                <div className="flex items-center">
                  <span className="stream-uptime mr-3">{formatUptime(streamUptime)}</span>
                  <span className="viewer-count flex items-center">
                    <Users className="h-4 w-4 mr-1" />
                    {viewerCount}
                  </span>
                </div>
              ) : null}
            </div>
          </div>
          
          {/* Health indicators */}
          <div className="stream-health-indicators grid grid-cols-1 sm:grid-cols-3 gap-4 mb-6">
            <div className={`health-card ${connectionStatus}`}>
              <div className="card-content">
                <div className="icon-wrapper">
                  <Activity className="h-5 w-5" />
                </div>
                <div className="health-info">
                  <h3 className="health-title">Connection</h3>
                  <p className="health-value">
                    {connectionStatus === 'good' ? 'Excellent' : 
                     connectionStatus === 'warning' ? 'Unstable' : 'Poor'}
                  </p>
                </div>
              </div>
            </div>
            
            <div className="health-card">
              <div className="card-content">
                <div className="icon-wrapper">
                  <Cpu className="h-5 w-5" />
                </div>
                <div className="health-info">
                  <h3 className="health-title">Server Load</h3>
                  <p className="health-value">{serverLoad}%</p>
                </div>
              </div>
            </div>
            
            <div className="health-card">
              <div className="card-content">
                <div className="icon-wrapper">
                  <Shield className="h-5 w-5" />
                </div>
                <div className="health-info">
                  <h3 className="health-title">CDN Nodes</h3>
                  <p className="health-value">{cdnNodes} active</p>
                </div>
              </div>
            </div>
          </div>
        </motion.div>
        
        {/* Tabs for different settings */}
        <motion.div 
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.2, duration: 0.5 }}
        >
          <Tabs defaultValue="setup" value={activeTab}>
            <TabsList className="grid grid-cols-3">
              <TabsTrigger value="setup" onClick={() => setActiveTab("setup")}>
                <Settings className="h-4 w-4 mr-2" />
                Setup
              </TabsTrigger>
              <TabsTrigger value="stats" onClick={() => setActiveTab("stats")}>
                <BarChart className="h-4 w-4 mr-2" />
                Analytics
              </TabsTrigger>
              <TabsTrigger value="guide" onClick={() => setActiveTab("guide")}>
                <Video className="h-4 w-4 mr-2" />
                OBS Guide
              </TabsTrigger>
            </TabsList>
            
            {/* Setup Tab */}
            <TabsContent value="setup" className="space-y-6">
              <motion.div 
                initial={{ y: 20, opacity: 0 }}
                animate={{ y: 0, opacity: 1 }}
                transition={{ duration: 0.4 }}
              >
                <Card className="stream-card" style={{
                  background: 'linear-gradient(135deg, rgba(25, 25, 112, 0.4), rgba(10, 10, 40, 0.7))',
                  border: '1px solid rgba(138, 43, 226, 0.3)',
                  boxShadow: '0 8px 20px rgba(0, 0, 0, 0.2)'
                }}>
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2 text-xl" style={{
                      color: 'white',
                      textShadow: '0 2px 4px rgba(0,0,0,0.3)'
                    }}>
                      <Zap className="h-5 w-5 text-purple-400" />
                      Stream Configuration
                    </CardTitle>
                    <CardDescription>
                      Copy these details to your streaming software
                    </CardDescription>
                  </CardHeader>
                  
                  <CardContent className="space-y-6">
                    {/* Stream URL Section */}
                    <div style={{ position: 'relative' }}>
                      <h3 className="text-md font-medium mb-2" style={{ 
                        color: '#8a2be2',
                        fontWeight: 'bold',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '6px' 
                      }}>
                        <Server className="h-4 w-4" />
                        Stream URL
                      </h3>
                      <div className="flex flex-col sm:flex-row gap-2">
                        <div style={{ position: 'relative', flexGrow: 1 }}>
                          <Input
                            value={RTMP_URL}
                            readOnly
                            className="font-mono"
                            style={{ 
                              backgroundColor: 'rgba(0, 0, 0, 0.3)',
                              color: 'white',
                              border: '1px solid rgba(138, 43, 226, 0.3)'
                            }}
                          />
                        </div>
                        
                        <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                          <Button
                            variant="outline"
                            onClick={() => copyToClipboard(RTMP_URL, 'Stream URL')}
                            className="stream-copy-button"
                          >
                            <Copy className="h-4 w-4 mr-2" />
                            Copy
                          </Button>
                        </motion.div>
                      </div>
                    </div>
                    
                    {/* Stream Key Section */}
                    <div>
                      <h3 className="text-md font-medium mb-2" style={{ 
                        color: '#8a2be2',
                        fontWeight: 'bold',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '6px'
                      }}>
                        <Shield className="h-4 w-4" />
                        Stream Key
                      </h3>
                      <div className="flex flex-col sm:flex-row gap-2">
                        <div style={{ position: 'relative', flexGrow: 1 }}>
                          <Input
                            type={showKey ? "text" : "password"}
                            value={STREAM_KEY}
                            readOnly
                            className="font-mono"
                            style={{ 
                              backgroundColor: 'rgba(0, 0, 0, 0.3)',
                              color: 'white',
                              border: '1px solid rgba(138, 43, 226, 0.3)'
                            }}
                          />
                          <Button
                            variant="ghost"
                            size="icon"
                            onClick={() => setShowKey(!showKey)}
                            className="absolute right-2 top-1/2 transform -translate-y-1/2"
                          >
                            {showKey ? (
                              <EyeOff className="h-4 w-4 text-gray-400" />
                            ) : (
                              <Eye className="h-4 w-4 text-gray-400" />
                            )}
                          </Button>
                        </div>
                        
                        <motion.div whileHover={{ scale: 1.05 }} whileTap={{ scale: 0.95 }}>
                          <Button
                            variant="outline"
                            onClick={() => copyToClipboard(STREAM_KEY, 'Stream Key')}
                            className="stream-copy-button"
                          >
                            <Copy className="h-4 w-4 mr-2" />
                            Copy
                          </Button>
                        </motion.div>
                      </div>
                      
                      <p className="text-xs text-purple-400/80 mt-2">
                        <AlertTriangle className="h-3 w-3 inline-block mr-1" />
                        Keep your stream key private. Never share it publicly.
                      </p>
                    </div>
                    
                    <Separator className="my-6 bg-purple-900/30" />
                    
                    {/* Additional Streaming Settings */}
                    <div>
                      <h3 className="text-md font-medium mb-4" style={{ 
                        color: '#8a2be2',
                        fontWeight: 'bold'
                      }}>
                        Recommended Settings
                      </h3>
                      
                      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div className="setting-card">
                          <h4 className="setting-title">Video</h4>
                          <ul className="setting-list">
                            <li>Resolution: 1920x1080 (or 1280x720)</li>
                            <li>Framerate: 60fps (or 30fps)</li>
                            <li>Keyframe Interval: 2 seconds</li>
                            <li>Preset: Quality or Performance</li>
                          </ul>
                        </div>
                        
                        <div className="setting-card">
                          <h4 className="setting-title">Audio</h4>
                          <ul className="setting-list">
                            <li>Bitrate: 128-320 Kbps</li>
                            <li>Sample Rate: 48 KHz</li>
                            <li>Channels: Stereo</li>
                            <li>Format: AAC</li>
                          </ul>
                        </div>
                      </div>
                    </div>
                    
                    {/* Share Stream Section */}
                    <div className="mt-4">
                      <h3 className="text-md font-medium mb-3" style={{ 
                        color: '#8a2be2',
                        fontWeight: 'bold',
                        display: 'flex',
                        alignItems: 'center',
                        gap: '6px'
                      }}>
                        <Share2 className="h-4 w-4" />
                        Share Your Stream
                      </h3>
                      
                      <div className="share-link-container">
                        <Input
                          value={`https://clipt.cc/${user?.username || 'your-username'}`}
                          readOnly
                          className="share-link font-mono"
                          style={{ 
                            backgroundColor: 'rgba(0, 0, 0, 0.3)',
                            color: 'white',
                            border: '1px solid rgba(138, 43, 226, 0.3)'
                          }}
                        />
                        <div className="share-buttons mt-3 flex space-x-2">
                          <motion.div 
                            className="inline-block"
                            whileHover={{ scale: 1.05 }} 
                            whileTap={{ scale: 0.95 }}
                          >
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => copyToClipboard(`https://clipt.cc/${user?.username || 'your-username'}`, 'Stream URL')}
                              className="stream-share-button"
                            >
                              <Copy className="h-3 w-3 mr-1" />
                              Copy
                            </Button>
                          </motion.div>
                        </div>
                      </div>
                    </div>
                  </CardContent>
                  
                  <CardFooter className="justify-between border-t border-purple-900/20 pt-5">
                    <div className="status-display flex items-center">
                      {streamActive ? (
                        <div className="status-active flex items-center">
                          <div className="pulse-dot mr-2"></div>
                          <span className="text-sm font-medium">Stream Active</span>
                        </div>
                      ) : (
                        <div className="status-inactive flex items-center">
                          <div className="inactive-dot mr-2"></div>
                          <span className="text-sm font-medium">Waiting for Stream</span>
                        </div>
                      )}
                    </div>
                    
                    <Button
                      onClick={() => navigate(`/streaming/${user?.id || '1'}`)}
                      className="view-stream-button"
                      style={{
                        background: 'linear-gradient(to right, #8a2be2, #4a00e0)',
                        boxShadow: '0 4px 10px rgba(138, 43, 226, 0.4)'
                      }}
                    >
                      <Tv className="h-4 w-4 mr-2" />
                      View Stream
                    </Button>
                  </CardFooter>
                </Card>
              </motion.div>
            </TabsContent>
            
            {/* Analytics Tab */}
            <TabsContent value="stats">
              <Card className="stream-card">
                <CardHeader>
                  <CardTitle>Stream Analytics</CardTitle>
                  <CardDescription>View your stream performance and audience</CardDescription>
                </CardHeader>
                <CardContent>
                  <p>Analytics content would go here.</p>
                </CardContent>
              </Card>
            </TabsContent>
            
            {/* OBS Guide Tab */}
            <TabsContent value="guide">
              <Card className="stream-card">
                <CardHeader>
                  <CardTitle>OBS Setup Guide</CardTitle>
                  <CardDescription>Learn how to set up your streaming software</CardDescription>
                </CardHeader>
                
                <CardContent>
                  <div className="obs-guide">
                    <div className="stream-setup-step">
                      <div>
                        <h4 className="font-semibold text-purple-400">Connect to Clipt</h4>
                        <p className="text-sm mt-1">Follow these steps to connect OBS to Clipt:</p>
                        <ol className="text-sm mt-2 space-y-2 text-gray-300">
                          <li className="flex items-start">
                            <span className="font-semibold mr-2">1.</span>
                            <span>Open OBS Studio and go to <strong>Settings</strong> → <strong>Stream</strong></span>
                          </li>
                          <li className="flex items-start">
                            <span className="font-semibold mr-2">2.</span>
                            <span>Select <strong>"Custom..."</strong> as the service</span>
                          </li>
                          <li className="flex items-start">
                            <span className="font-semibold mr-2">3.</span>
                            <span>For <strong>Server</strong>, enter: <code className="bg-black/20 px-1 rounded">{RTMP_URL}</code></span>
                          </li>
                          <li className="flex items-start">
                            <span className="font-semibold mr-2">4.</span>
                            <span>For <strong>Stream Key</strong>, enter: <code className="bg-black/20 px-1 rounded">{showKey ? STREAM_KEY : '●●●●●●●●●●●●●●●●●●●●'}</code></span>
                          </li>
                          <li className="flex items-start">
                            <span className="font-semibold mr-2">5.</span>
                            <span>Click <strong>Apply</strong> and then <strong>OK</strong></span>
                          </li>
                        </ol>
                      </div>
                    </div>
                    
                    <div className="stream-setup-step">
                      <div>
                        <h4 className="font-semibold text-blue-400">Configure Output Settings</h4>
                        <p className="text-sm mt-1">For optimal quality:</p>
                        <ol className="text-sm mt-2 space-y-2 text-gray-300">
                          <li className="flex items-start">
                            <span className="font-semibold mr-2">1.</span>
                            <span>Go to <strong>Settings</strong> → <strong>Output</strong></span>
                          </li>
                          <li className="flex items-start">
                            <span className="font-semibold mr-2">2.</span>
                            <span>Set <strong>Output Mode</strong> to <strong>Advanced</strong></span>
                          </li>
                          <li className="flex items-start">
                            <span className="font-semibold mr-2">3.</span>
                            <span>Under the <strong>Streaming</strong> tab:</span>
                            <ul className="ml-6 mt-1 space-y-1">
                              <li>• Encoder: x264 (or NVIDIA NVENC if available)</li>
                              <li>• Rate Control: CBR</li>
                              <li>• Bitrate: 6000 Kbps</li>
                              <li>• Keyframe Interval: 2</li>
                              <li>• CPU Usage Preset: Fast</li>
                              <li>• Profile: High</li>
                            </ul>
                          </li>
                        </ol>
                      </div>
                    </div>
                    
                    <div className="stream-setup-step">
                      <div>
                        <h4 className="font-semibold text-green-400">Start Streaming</h4>
                        <p className="text-sm mt-1">You're all set! Click <strong>Start Streaming</strong> in OBS when you're ready to go live.</p>
                        <p className="text-sm mt-2">Your stream will appear on your channel page automatically.</p>
                      </div>
                    </div>
                  </div>
                </CardContent>
                
                <CardFooter>
                  <p className="text-xs text-center w-full text-gray-400">
                    Need more help? Check out our <a href="#" className="text-blue-400 hover:underline">detailed streaming guide</a> or <a href="#" className="text-blue-400 hover:underline">contact support</a>
                  </p>
                </CardFooter>
              </Card>
            </TabsContent>
          </Tabs>
        </motion.div>
      </div>
    </div>
  );
}
